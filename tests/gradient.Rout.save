
pqR version 2.15.1 (2018-00-00), based on R 2.15.0 (2012-03-30)

R 2.15.0 is Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

Modifications to R in pqR are Copyright (C) 2013-2018 Radford M. Neal

Some modules are from R-2.15.1 or later versions distributed by the R Core Team

Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.


No helper threads, task merging enabled, uncompressed pointers.

> # Test gradient computations.
> #
> # Added for pqR, 2018 Radford M. Neal.
> 
> 
> # Check consistency of simple math derivatives using track_gradient with 'D'
> 
> x <- 0.32739
> 
> print (identical (track_gradient (x) gradient_of (sqrt(x)),
+                   eval (D (quote (sqrt(x)), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (exp(x)),
+                   eval (D (quote (exp(x)), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (expm1(x)),
+                   eval (D (quote (expm1(x)), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (log1p(x)),
+                   eval (D (quote (log1p(x)), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (log(x)),
+                   eval (D (quote (log(x)), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (cos(x)),
+                   eval (D (quote (cos(x)), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (sin(x)),
+                   eval (D (quote (sin(x)), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (tan(x)),
+                   eval (D (quote (tan(x)), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (acos(x)),
+                   eval (D (quote (acos(x)), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (asin(x)),
+                   eval (D (quote (asin(x)), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (cosh(x)),
+                   eval (D (quote (cosh(x)), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (sinh(x)),
+                   eval (D (quote (sinh(x)), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (tanh(x)),
+                   eval (D (quote (tanh(x)), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (lgamma(x)),
+                   eval (D (quote (lgamma(x)), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (gamma(x)),
+                   eval (D (quote (gamma(x)), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (digamma(x)),
+                   eval (D (quote (digamma(x)), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (trigamma(x)),
+                   eval (D (quote (trigamma (x)), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (+x),
+                   eval (D (quote (+x), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (-x),
+                   eval (D (quote (-x), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (3.1+x),
+                   eval (D (quote (3.1+x), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (3.1-x),
+                   eval (D (quote (3.1-x), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (3.1*x),
+                   eval (D (quote (3.1*x), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (3.1/x),
+                   eval (D (quote (3.1/x), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (3.1^x),
+                   eval (D (quote (3.1^x), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (x+3.1),
+                   eval (D (quote (x+3.1), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (x-3.1),
+                   eval (D (quote (x-3.1), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (x*3.1),
+                   eval (D (quote (x*3.1), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (x/3.1),
+                   eval (D (quote (x/3.1), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (x^3.1),
+                   eval (D (quote (x^3.1), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (x+x),
+                   eval (D (quote (x+x), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (x-x),
+                   eval (D (quote (x-x), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (x*x),
+                   eval (D (quote (x*x), "x")) ))
[1] TRUE
> 
> print (identical (track_gradient (x) gradient_of (x/x),
+                   eval (D (quote (x/x), "x")) ))
[1] TRUE
> 
> print (identical (round (track_gradient (x) gradient_of (x^x), 14),
+                   round (eval (D (quote (x^x), "x")), 14) ))
[1] TRUE
> 
> 
> # Check gradient computations passing through mathematical function dispatch.
> 
> a <- 256; class(a) <- "fred"
> cos.fred <- function (x) tan(x)
> log2.fred <- function (x) tan(tan(x))
> Math.fred <- function (x,...) {
+     if (.Generic=="log") sqrt(x)
+     else if (.Generic=="log10") sqrt(sqrt(x))
+     else if (.Generic=="exp") sqrt(sqrt(sqrt(x)))
+     else NextMethod()
+ }
> 
> print(cos(a))
[1] 25.11156
attr(,"class")
[1] "fred"
> print(log2(a))
[1] -0.02118493
attr(,"class")
[1] "fred"
> print(log(a))
[1] 16
attr(,"class")
[1] "fred"
> print(log10(a))
[1] 4
attr(,"class")
[1] "fred"
> print(exp(a))
[1] 2
attr(,"class")
[1] "fred"
> print(sin(a))
[1] -0.999208
attr(,"class")
[1] "fred"
> 
> print (with_gradient (a) cos(a))
[1] 25.11156
attr(,"class")
[1] "fred"
attr(,"gradient")
[1] 631.5904
> print (with_gradient (a) log2(a))
[1] -0.02118493
attr(,"class")
[1] "fred"
attr(,"gradient")
[1] 631.8739
> print (with_gradient (a) log(a))
[1] 16
attr(,"class")
[1] "fred"
attr(,"gradient")
[1] 0.03125
> print (with_gradient (a) log10(a))
[1] 4
attr(,"class")
[1] "fred"
attr(,"gradient")
[1] 0.00390625
> print (with_gradient (a) exp(a))
[1] 2
attr(,"class")
[1] "fred"
attr(,"gradient")
[1] 0.0009765625
> print (with_gradient (a) sin(a))
[1] -0.999208
attr(,"class")
[1] "fred"
attr(,"gradient")
[1] -0.03979076
> 
> 
> # Check tracking of gradients through S3 methods.
> 
> fuddle <- function (x,y) UseMethod("fuddle")
> fuddle.default <- function (x,y) x^2+y^3
> fuddle.mary <- function (x,y) sin(x) + log(y)
> fuddle.bert <- function (x,y) NextMethod("fuddle")
> 
> a <- 256; class(a) <- "mary"
> b <- 200; class(b) <- "bert"
> 
> with_gradient (a=256,b=200) fuddle(a,b)
[1] 8065536
attr(,"gradient")
attr(,"gradient")$a
[1] 512

attr(,"gradient")$b
[1] 120000

> with_gradient (a,b) fuddle(a,b)
[1] 4.299109
attr(,"class")
[1] "mary"
attr(,"gradient")
attr(,"gradient")$a
[1] -0.03979076

attr(,"gradient")$b
[1] 0.005

> with_gradient (a,b) fuddle(b,a)
[1] 16817216
attr(,"class")
[1] "bert"
attr(,"gradient")
attr(,"gradient")$a
[1] 196608

attr(,"gradient")$b
[1] 400

> 
> biffle <- function (x) UseMethod("biffle")
> biffle.mary <- function (x) NextMethod("biffle",x,x^2,x^3)
> biffle.bert <- function (x,y,z) sin(x)+cos(y)+exp(-sqrt(z)/2000)
> 
> b <- 200; class(b) <- c("mary","bert")
> biffle(b)
[1] -0.3075931
attr(,"class")
[1] "mary" "bert"
> with_gradient (b) biffle(b)
[1] -0.3075931
attr(,"class")
[1] "mary" "bert"
attr(,"gradient")
[1] -378.1313
> 
> 
> # Check tracking of gradients through S4 methods.  Not currently implemented,
> # so this is disabled.
> 
> if (FALSE) {
+ 
+ setGeneric ("fiddler", function (x,y) x^2+y^3)
+ fiddler(2,3)
+ with_gradient (x=2,y=3) fiddler(x,y)
+ 
+ }
> 
> 
> # Check consistency of results between with_gradient and numericDeriv.
> 
> x <- 0.32739
> x1 <- 0.47718; x2 <- 0.89472; x3 <- 0.67325
> y1 <- -0.3721; y2 <- -0.8131; y3 <- 1.22213
> z1 <- 11.4319; z2 <- 13.1133; z3 <- 6.68901
> i1 <- 3
> 
> bindgrads <- function (r1,r2) 
+     cbind (rbind(r1,r2), rbind(attr(r1,"gradient"),unlist(attr(r2,"gradient"))))
> 
> test1 <- function (fun,...)
+     print (bindgrads (numericDeriv(quote(fun(x,...)),"x"),
+                       with_gradient (x) fun(x,...)))
> test1p1 <- function (fun,...)
+     print (bindgrads (numericDeriv(quote(fun(x+1,...)),"x"),
+                       with_gradient (x) fun(x+1,...)))
> 
> test1r <- function (fun,...) {
+     f <- function (x) { set.seed(179); fun(1,x,...) }
+     print (bindgrads (numericDeriv(quote(f(x)),"x"),
+                       with_gradient (x) f(x)))
+ }
> 
> test2 <- function (fun,...) {
+     print (bindgrads (numericDeriv(quote(fun(x1,x2,...)),"x1"),
+                       with_gradient (x1) fun(x1,x2,...)))
+     print (bindgrads (numericDeriv(quote(fun(x1,x2,...)),"x2"),
+                       with_gradient (x2) fun(x1,x2,...)))
+     print (bindgrads (numericDeriv(quote(fun(x1,x2,...)),c("x1","x2")),
+                       with_gradient (x1,x2) fun(x1,x2,...)))
+     print (bindgrads (numericDeriv(quote(fun(x1,x2,...)),c("x1","x2")),
+       { r <- with_gradient (x1) { s <- with_gradient (x2) fun(x1,x2,...); 
+                                   g2 <<- attr(s,"gradient"); s }
+         attr(r,"gradient") <- cbind(g1=attr(r,"gradient"),g2=g2)
+         r
+       }
+     ))
+ }
> 
> test2z <- function (fun,...) {
+     print (bindgrads (numericDeriv(quote(fun(z1,z2,...)),"z1"),
+                       with_gradient (z1) fun(z1,z2,...)))
+     print (bindgrads (numericDeriv(quote(fun(z1,z2,...)),"z2"),
+                       with_gradient (z2) fun(z1,z2,...)))
+     print (bindgrads (numericDeriv(quote(fun(z1,z2,...)),c("z1","z2")),
+                       with_gradient (z1,z2) fun(z1,z2,...)))
+     print (bindgrads (numericDeriv(quote(fun(z1,z2,...)),c("z1","z2")),
+       { r <- with_gradient (z1) { s <- with_gradient (z2) fun(z1,z2,...); 
+                                   g2 <<- attr(s,"gradient"); s }
+         attr(r,"gradient") <- cbind(g1=attr(r,"gradient"),g2=g2)
+         r
+       }
+     ))
+ }
> 
> test2i <- function (fun,...) {
+     print (bindgrads (numericDeriv(quote(fun(i1,x2,...)),"x2"),
+                       with_gradient (x2) fun(i1,x2,...)))
+ }
> 
> test2r <- function (fun,...) {
+     f <- function (x1,x2) { set.seed(179); fun(1,x1,x2,...) }
+     print (bindgrads (numericDeriv(quote(f(x1,x2)),c("x1","x2")),
+                       with_gradient (x1,x2) f(x1,x2)))
+ }
> 
> test3 <- function (fun,...) {
+     print (bindgrads (numericDeriv(quote(fun(x1,x2,x3,...)),"x1"),
+                       with_gradient (x1) fun(x1,x2,x3,...)))
+     print (bindgrads (numericDeriv(quote(fun(x1,x2,x3,...)),"x2"),
+                       with_gradient (x2) fun(x1,x2,x3,...)))
+     print (bindgrads (numericDeriv(quote(fun(x1,x2,x3,...)),"x3"),
+                       with_gradient (x3) fun(x1,x2,x3,...)))
+     print (bindgrads (numericDeriv(quote(fun(x1,x2,x3,...)),c("x1","x2","x3")),
+                       with_gradient (x1,x2,x3) fun(x1,x2,x3,...)))
+ }
> 
> test3y <- function (fun,...) {
+     print (bindgrads (numericDeriv(quote(fun(y1,y2,y3,...)),"y1"),
+                       with_gradient (y1) fun(y1,y2,y3,...)))
+     print (bindgrads (numericDeriv(quote(fun(y1,y2,y3,...)),"y2"),
+                       with_gradient (y2) fun(y1,y2,y3,...)))
+     print (bindgrads (numericDeriv(quote(fun(y1,y2,y3,...)),"y3"),
+                       with_gradient (y3) fun(y1,y2,y3,...)))
+     print (bindgrads (numericDeriv(quote(fun(y1,y2,y3,...)),c("y1","y2","y3")),
+                       with_gradient (y1,y2,y3) fun(y1,y2,y3,...)))
+ }
> 
> test3z <- function (fun,...) {
+     print (bindgrads (numericDeriv(quote(fun(z1,z2,z3,...)),"z1"),
+                       with_gradient (z1) fun(z1,z2,z3,...)))
+     print (bindgrads (numericDeriv(quote(fun(z1,z2,z3,...)),"z2"),
+                       with_gradient (z2) fun(z1,z2,z3,...)))
+     print (bindgrads (numericDeriv(quote(fun(z1,z2,z3,...)),"z3"),
+                       with_gradient (z3) fun(z1,z2,z3,...)))
+     print (bindgrads (numericDeriv(quote(fun(z1,z2,z3,...)),c("z1","z2","z3")),
+                       with_gradient (z1,z2,z3) fun(z1,z2,z3,...)))
+ }
> 
> test1(abs)
      [,1] [,2]
r1 0.32739    1
r2 0.32739    1
> 
> test1(sqrt)
      [,1]      [,2]
r1 0.57218 0.8738508
r2 0.57218 0.8738508
> 
> test1(exp)
       [,1]     [,2]
r1 1.387342 1.387342
r2 1.387342 1.387342
> test1(expm1)
        [,1]     [,2]
r1 0.3873424 1.387342
r2 0.3873424 1.387342
> 
> test1(log1p)
        [,1]      [,2]
r1 0.2832146 0.7533581
r2 0.2832146 0.7533581
> test1(log)
        [,1]     [,2]
r1 -1.116603 3.054461
r2 -1.116603 3.054461
> test1(log2)
        [,1]     [,2]
r1 -1.610918 4.406656
r2 -1.610918 4.406656
> test1(log10)
         [,1]     [,2]
r1 -0.4849346 1.326536
r2 -0.4849346 1.326536
> 
> test1(cos)
        [,1]       [,2]
r1 0.9468849 -0.3215728
r2 0.9468849 -0.3215728
> test1(sin)
        [,1]      [,2]
r1 0.3215728 0.9468849
r2 0.3215728 0.9468849
> test1(tan)
        [,1]     [,2]
r1 0.3396113 1.115336
r2 0.3396113 1.115336
> 
> test1(acos)
       [,1]      [,2]
r1 1.237256 -1.058325
r2 1.237256 -1.058325
> test1(asin)
      [,1]     [,2]
r1 0.33354 1.058325
r2 0.33354 1.058325
> test1(atan)
        [,1]      [,2]
r1 0.3163921 0.9031921
r2 0.3163921 0.9031921
> 
> test1(cosh)
       [,1]      [,2]
r1 1.054073 0.3332699
r2 1.054073 0.3332699
> test1(sinh)
        [,1]     [,2]
r1 0.3332699 1.054073
r2 0.3332699 1.054073
> test1(tanh)
        [,1]      [,2]
r1 0.3161736 0.9000342
r2 0.3161736 0.9000342
> 
> test1p1(acosh)
        [,1]     [,2]
r1 0.7885917 1.145599
r2 0.7885917 1.145599
> test1(asinh)
        [,1]      [,2]
r1 0.3218068 0.9503642
r2 0.3218068 0.9503642
> test1(atanh)
        [,1]     [,2]
r1 0.3399021 1.120052
r2 0.3399021 1.120052
> 
> test1(gamma)
       [,1]      [,2]
r1 2.729765 -8.716212
r2 2.729765 -8.716212
> test1(lgamma)
       [,1]      [,2]
r1 1.004216 -3.193026
r2 1.004216 -3.193026
> test1(digamma)
        [,1]     [,2]
r1 -3.193026 10.43204
r2 -3.193026 10.43204
> test1(trigamma)
       [,1]      [,2]
r1 10.43204 -58.12982
r2 10.43204 -58.12982
> 
> test2(atan2)
        [,1]      [,2]
r1 0.4899538 0.8701601
r2 0.4899538 0.8701601
        [,1]       [,2]
r1 0.4899538 -0.4640815
r2 0.4899538 -0.4640815
                    x1         x2
r1 0.4899538 0.8701601 -0.4640815
r2 0.4899538 0.8701601 -0.4640815
                    g1         g2
r1 0.4899538 0.8701601 -0.4640815
r2 0.4899538 0.8701601 -0.4640815
> test2z(atan2)
        [,1]      [,2]
r1 0.7170028 0.0433287
r2 0.7170028 0.0433287
        [,1]        [,2]
r1 0.7170028 -0.03777305
r2 0.7170028 -0.03777305
                    z1          z2
r1 0.7170028 0.0433287 -0.03777305
r2 0.7170028 0.0433287 -0.03777305
                    g1          g2
r1 0.7170028 0.0433287 -0.03777305
r2 0.7170028 0.0433287 -0.03777305
> 
> test2(beta)
       [,1]      [,2]
r1 2.239741 -4.457335
r2 2.239741 -4.457335
       [,1]      [,2]
r1 2.239741 -1.510769
r2 2.239741 -1.510769
                   x1        x2
r1 2.239741 -4.457335 -1.510769
r2 2.239741 -4.457335 -1.510769
                   g1        g2
r1 2.239741 -4.457335 -1.510769
r2 2.239741 -4.457335 -1.510769
> test2z(beta)
           [,1]          [,2]
r1 4.434014e-08 -3.493888e-08
r2 4.434014e-08 -3.493888e-08
           [,1]          [,2]
r1 4.434014e-08 -2.859912e-08
r2 4.434014e-08 -2.859912e-08
                           z1            z2
r1 4.434014e-08 -3.493888e-08 -2.859912e-08
r2 4.434014e-08 -3.493888e-08 -2.859912e-08
                           g1            g2
r1 4.434014e-08 -3.493888e-08 -2.859912e-08
r2 4.434014e-08 -3.493888e-08 -2.859912e-08
> 
> test2(lbeta)
        [,1]      [,2]
r1 0.8063602 -1.990112
r2 0.8063602 -1.990112
        [,1]       [,2]
r1 0.8063602 -0.6745284
r2 0.8063602 -0.6745284
                    x1         x2
r1 0.8063602 -1.990112 -0.6745284
r2 0.8063602 -1.990112 -0.6745284
                    g1         g2
r1 0.8063602 -1.990112 -0.6745284
r2 0.8063602 -1.990112 -0.6745284
> test2z(lbeta)
        [,1]       [,2]
r1 -16.93138 -0.7879742
r2 -16.93138 -0.7879742
        [,1]      [,2]
r1 -16.93138 -0.644994
r2 -16.93138 -0.644994
                     z1        z2
r1 -16.93138 -0.7879742 -0.644994
r2 -16.93138 -0.7879742 -0.644994
                     g1        g2
r1 -16.93138 -0.7879742 -0.644994
r2 -16.93138 -0.7879742 -0.644994
> 
> test2(dexp)
        [,1]       [,2]
r1 0.5838058 -0.5223427
r2 0.5838058 -0.5223427
        [,1]      [,2]
r1 0.5838058 0.3739206
r2 0.5838058 0.3739206
                     x1        x2
r1 0.5838058 -0.5223427 0.3739206
r2 0.5838058 -0.5223427 0.3739206
                     g1        g2
r1 0.5838058 -0.5223427 0.3739206
r2 0.5838058 -0.5223427 0.3739206
> test2(dexp,log=TRUE)
         [,1]     [,2]
r1 -0.5381869 -0.89472
r2 -0.5381869 -0.89472
         [,1]      [,2]
r1 -0.5381869 0.6404881
r2 -0.5381869 0.6404881
                    x1        x2
r1 -0.5381869 -0.89472 0.6404881
r2 -0.5381869 -0.89472 0.6404881
                    g1        g2
r1 -0.5381869 -0.89472 0.6404881
r2 -0.5381869 -0.89472 0.6404881
> test1r(rexp)
        [,1]      [,2]
r1 0.7957275 -2.430519
r2 0.7957275 -2.430519
> 
> test2i(dgeom)
          [,1]        [,2]
r1 0.001044058 -0.02858399
r2 0.001044058 -0.02858399
> test2i(dgeom,log=TRUE)
       [,1]      [,2]
r1 -6.86464 -27.37777
r2 -6.86464 -27.37777
> 
> test2i(dpois)
         [,1]     [,2]
r1 0.04879083 0.114805
r2 0.04879083 0.114805
> test2i(dpois,log=TRUE)
        [,1]     [,2]
r1 -3.020213 2.353004
r2 -3.020213 2.353004
> 
> test2r(rcauchy)
             x1        x2
r1 -1.585831  1 -2.305762
r2 -1.585831  1 -2.305762
> 
> test2r(rlnorm)
                x1        x2
r1 2.16995 2.16995 0.7215801
r2 2.16995 2.16995 0.7215800
> 
> test2r(rlogis)
             x1        x2
r1 0.9543501  1 0.5333178
r2 0.9543501  1 0.5333178
> 
> test3(dnorm)
        [,1]      [,2]
r1 0.4888913 0.4503578
r2 0.4888913 0.4503578
        [,1]       [,2]
r1 0.4888913 -0.4503578
r2 0.4888913 -0.4503578
        [,1]       [,2]
r1 0.4888913 -0.4468606
r2 0.4888913 -0.4468606
                    x1         x2         x3
r1 0.4888913 0.4503578 -0.4503578 -0.4468606
r2 0.4888913 0.4503578 -0.4503578 -0.4468606
> test3(dnorm,log=TRUE)
         [,1]      [,2]
r1 -0.7156151 0.9211818
r2 -0.7156151 0.9211818
         [,1]       [,2]
r1 -0.7156151 -0.9211819
r2 -0.7156151 -0.9211818
         [,1]       [,2]
r1 -0.7156151 -0.9140286
r2 -0.7156151 -0.9140286
                     x1         x2         x3
r1 -0.7156151 0.9211818 -0.9211819 -0.9140286
r2 -0.7156151 0.9211818 -0.9211818 -0.9140286
> test3z(dnorm)
         [,1]        [,2]
r1 0.05778667 0.002171576
r2 0.05778667 0.002171576
         [,1]         [,2]
r1 0.05778667 -0.002171576
r2 0.05778667 -0.002171576
         [,1]         [,2]
r1 0.05778667 -0.008093182
r2 0.05778667 -0.008093182
                       z1           z2           z3
r1 0.05778667 0.002171576 -0.002171576 -0.008093182
r2 0.05778667 0.002171576 -0.002171576 -0.008093182
> test3z(dnorm,log=TRUE)
        [,1]       [,2]
r1 -2.850997 0.03757919
r2 -2.850997 0.03757918
        [,1]        [,2]
r1 -2.850997 -0.03757918
r2 -2.850997 -0.03757918
        [,1]       [,2]
r1 -2.850997 -0.1400528
r2 -2.850997 -0.1400528
                     z1          z2         z3
r1 -2.850997 0.03757919 -0.03757918 -0.1400528
r2 -2.850997 0.03757918 -0.03757918 -0.1400528
> 
> test3(pnorm)
        [,1]      [,2]
r1 0.2675678 0.4888913
r2 0.2675678 0.4888913
        [,1]       [,2]
r1 0.2675678 -0.4888913
r2 0.2675678 -0.4888913
        [,1]      [,2]
r1 0.2675678 0.3032034
r2 0.2675678 0.3032034
                    x1         x2        x3
r1 0.2675678 0.4888913 -0.4888913 0.3032034
r2 0.2675678 0.4888913 -0.4888913 0.3032034
> test3(pnorm,log=TRUE)
        [,1]     [,2]
r1 -1.318382 1.827168
r2 -1.318382 1.827168
        [,1]      [,2]
r1 -1.318382 -1.827168
r2 -1.318382 -1.827168
        [,1]     [,2]
r1 -1.318382 1.133183
r2 -1.318382 1.133183
                   x1        x2       x3
r1 -1.318382 1.827168 -1.827168 1.133183
r2 -1.318382 1.827168 -1.827168 1.133183
> test3(pnorm,lower=FALSE)
        [,1]       [,2]
r1 0.7324322 -0.4888913
r2 0.7324322 -0.4888913
        [,1]      [,2]
r1 0.7324322 0.4888913
r2 0.7324322 0.4888913
        [,1]       [,2]
r1 0.7324322 -0.3032034
r2 0.7324322 -0.3032034
                     x1        x2         x3
r1 0.7324322 -0.4888913 0.4888913 -0.3032034
r2 0.7324322 -0.4888913 0.4888913 -0.3032034
> test3(pnorm,log=TRUE,lower=FALSE)
         [,1]       [,2]
r1 -0.3113845 -0.6674902
r2 -0.3113845 -0.6674902
         [,1]      [,2]
r1 -0.3113845 0.6674901
r2 -0.3113845 0.6674902
         [,1]       [,2]
r1 -0.3113845 -0.4139678
r2 -0.3113845 -0.4139678
                      x1        x2         x3
r1 -0.3113845 -0.6674902 0.6674901 -0.4139678
r2 -0.3113845 -0.6674902 0.6674902 -0.4139678
> test3z(pnorm)
       [,1]       [,2]
r1 0.400765 0.05778667
r2 0.400765 0.05778667
       [,1]        [,2]
r1 0.400765 -0.05778667
r2 0.400765 -0.05778667
       [,1]       [,2]
r1 0.400765 0.01452569
r2 0.400765 0.01452569
                    z1          z2         z3
r1 0.400765 0.05778667 -0.05778667 0.01452569
r2 0.400765 0.05778667 -0.05778667 0.01452569
> test3z(pnorm,log=TRUE)
         [,1]      [,2]
r1 -0.9143801 0.1441909
r2 -0.9143801 0.1441909
         [,1]       [,2]
r1 -0.9143801 -0.1441909
r2 -0.9143801 -0.1441909
         [,1]       [,2]
r1 -0.9143801 0.03624491
r2 -0.9143801 0.03624491
                     z1         z2         z3
r1 -0.9143801 0.1441909 -0.1441909 0.03624491
r2 -0.9143801 0.1441909 -0.1441909 0.03624491
> test3z(pnorm,lower=FALSE)
       [,1]        [,2]
r1 0.599235 -0.05778667
r2 0.599235 -0.05778667
       [,1]       [,2]
r1 0.599235 0.05778667
r2 0.599235 0.05778667
       [,1]        [,2]
r1 0.599235 -0.01452569
r2 0.599235 -0.01452569
                     z1         z2          z3
r1 0.599235 -0.05778667 0.05778667 -0.01452569
r2 0.599235 -0.05778667 0.05778667 -0.01452569
> test3z(pnorm,log=TRUE,lower=FALSE)
         [,1]        [,2]
r1 -0.5121014 -0.09643406
r2 -0.5121014 -0.09643406
         [,1]       [,2]
r1 -0.5121014 0.09643406
r2 -0.5121014 0.09643406
         [,1]        [,2]
r1 -0.5121014 -0.02424039
r2 -0.5121014 -0.02424039
                       z1         z2          z3
r1 -0.5121014 -0.09643406 0.09643406 -0.02424039
r2 -0.5121014 -0.09643406 0.09643406 -0.02424039
> 
> test3(qnorm)
        [,1]     [,2]
r1 0.8561882 1.690354
r2 0.8561882 1.690354
        [,1] [,2]
r1 0.8561882    1
r2 0.8561882    1
        [,1]        [,2]
r1 0.8561882 -0.05723249
r2 0.8561882 -0.05723249
                   x1 x2          x3
r1 0.8561882 1.690354  1 -0.05723249
r2 0.8561882 1.690354  1 -0.05723249
> test3y(qnorm,log=TRUE)
        [,1]     [,2]
r1 -0.209581 2.385397
r2 -0.209581 2.385397
        [,1] [,2]
r1 -0.209581    1
r2 -0.209581    1
        [,1]      [,2]
r1 -0.209581 0.4938256
r2 -0.209581 0.4938256
                   y1 y2        y3
r1 -0.209581 2.385397  1 0.4938256
r2 -0.209581 2.385397  1 0.4938256
> test3(qnorm,lower=FALSE)
        [,1]      [,2]
r1 0.9332518 -1.690354
r2 0.9332518 -1.690354
        [,1] [,2]
r1 0.9332518    1
r2 0.9332518    1
        [,1]       [,2]
r1 0.9332518 0.05723249
r2 0.9332518 0.05723249
                    x1 x2         x3
r1 0.9332518 -1.690354  1 0.05723249
r2 0.9332518 -1.690354  1 0.05723249
> test3y(qnorm,log=TRUE,lower=FALSE)
        [,1]      [,2]
r1 -1.416619 -2.385397
r2 -1.416619 -2.385397
        [,1] [,2]
r1 -1.416619    1
r2 -1.416619    1
        [,1]       [,2]
r1 -1.416619 -0.4938256
r2 -1.416619 -0.4938256
                    y1 y2         y3
r1 -1.416619 -2.385397  1 -0.4938256
r2 -1.416619 -2.385397  1 -0.4938256
> 
> test2r(rnorm)
            x1        x2
r1 0.774704  1 0.3325331
r2 0.774704  1 0.3325331
> 
> test2r(runif)
                    x1        x2
r1 0.7403373 0.3697434 0.6302566
r2 0.7403373 0.3697434 0.6302566
> 
> test2r(rweibull)
                    x1        x2
r1 0.1770773 0.6011398 0.1979137
r2 0.1770773 0.6011398 0.1979137
> 
