
pqR version 2.15.1 (2018-00-00), based on R 2.15.0 (2012-03-30)

R 2.15.0 is Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

Modifications to R in pqR are Copyright (C) 2013-2018 Radford M. Neal

Some modules are from R-2.15.1 or later versions distributed by the R Core Team

Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.


No helper threads, task merging enabled, uncompressed pointers.

> # Test possible bugs involving allocation and use of vectors, such as 
> # incorrect computation of required memory.  Also tests allocation and
> # reallocation for "c".  Finally, exercises .. and "along" for "for".
> #
> # Added for pqR, 2018, Radford M. Neal.
> 
> 
> # Test of allocation.
> 
> lengths <- c(0..17, 28..33, 60..65, 124..129, 252..257)
> types <- c("integer","numeric","complex","character","list")
> 
> R <- list()
> 
> for (r in 1..10) {
+ 
+     cat("vector allocation test, repetition",r,"\n")
+ 
+     for (i in 1..length(lengths)) {
+         R[[i]] <- list()
+         for (j in 1..length(types)) {
+             V <- vector(types[j],lengths[i])
+             for (k in 1..lengths[i]) V[k] <- as.integer(10000*i + 1000*j + k)
+             R[[i]][[j]] <- V
+         }
+     }
+ 
+     if (r == 1) { cat ("\n"); print(R[[3]]) }
+     
+     for (i along lengths) {
+         for (j along types) {
+             for (k in 1..lengths[i]) {
+                 stopifnot (as.integer(R[[i]][[j]][[k]])
+                   == as.integer(10000*i + 1000*j + k))
+                 R[[i]][[j]][[k]] <- as.integer(R[[i]][[j]][[k]]) +
+                          as.integer(1000000000*(i%%2) + 100000000*j + 300000*k)
+             }
+         }
+     }
+ 
+     if (r == 1) { cat ("\n"); print(R[[3]]) }
+     
+     for (i in 1..length(lengths)) {
+         for (j in 1..length(types)) {
+             for (k in 1..lengths[i]) {
+                 stopifnot (as.integer(R[[i]][[j]][[k]])
+                   == as.integer(10000*i + 1000*j + k)
+                       + as.integer(1000000000*(i%%2) + 100000000*j + 300000*k))
+             }
+         }
+     }
+ 
+     if (r == 1) { cat ("\n"); print(R[[3]]); print(lapply(R[[4]],typeof)) }
+ }
vector allocation test, repetition 1 

[[1]]
[1] 31001 31002

[[2]]
[1] 32001 32002

[[3]]
[1] 33001+0i 33002+0i

[[4]]
[1] "34001" "34002"

[[5]]
[[5]][[1]]
[1] 35001

[[5]][[2]]
[1] 35002



[[1]]
[1] 1100331001 1100631002

[[2]]
[1] 1200332001 1200632002

[[3]]
[1] 1300333001+0i 1300633002+0i

[[4]]
[1] "1400334001" "1400634002"

[[5]]
[[5]][[1]]
[1] 1500335001

[[5]][[2]]
[1] 1500635002



[[1]]
[1] 1100331001 1100631002

[[2]]
[1] 1200332001 1200632002

[[3]]
[1] 1300333001+0i 1300633002+0i

[[4]]
[1] "1400334001" "1400634002"

[[5]]
[[5]][[1]]
[1] 1500335001

[[5]][[2]]
[1] 1500635002


[[1]]
[1] "integer"

[[2]]
[1] "double"

[[3]]
[1] "complex"

[[4]]
[1] "character"

[[5]]
[1] "list"

vector allocation test, repetition 2 
vector allocation test, repetition 3 
vector allocation test, repetition 4 
vector allocation test, repetition 5 
vector allocation test, repetition 6 
vector allocation test, repetition 7 
vector allocation test, repetition 8 
vector allocation test, repetition 9 
vector allocation test, repetition 10 
> 
> 
> # Tests of "c".
> 
> for (n in c(10L,100L,1000L,10000L,1000000L)) {  # must all be multiples of 5
+ 
+     cat("c test, with n =",n,"\n")
+ 
+     ivals <- 1:n  # must not have dim attribute, so not ..
+     rvals <- ivals + c(rep(0.1,n/5-1),rep(0,4*n/5+1))
+     
+     ivalsn <- ivals
+     names(ivalsn) <- paste0("N",ivals)
+     rvalsn <- rvals
+     names(rvalsn) <- paste0("N",ivals)
+ 
+     ivals2 <- 1:(n+2)
+     rvals2 <- ivals2 + c(rep(0.1,n/5-1),rep(0,4*n/5+3))
+ 
+     ivals2n <- ivals2
+     names(ivals2n) <- paste0("N",ivals2)
+     rvals2n <- rvals2
+     names(rvals2n) <- paste0("N",ivals2)
+ 
+     stopifnot (identical (c(ivals,n+1L,n+2L), ivals2))
+     stopifnot (identical (c(ivals,c(n+1L,n+2L)), ivals2))
+     stopifnot (identical (c(rvals,n+1,n+2L), rvals2))
+     stopifnot (identical (c(rvals,c(n+1L,n+2)), rvals2))
+ 
+     if (n == 100) {
+         stopifnot (identical (c(ivalsn,N101=n+1L,N102=n+2L), ivals2n))
+         stopifnot (identical (c(ivalsn,c(N101=n+1L,N102=n+2L)), ivals2n))
+         stopifnot (identical (c(rvalsn,N101=n+1,N102=n+2), rvals2n))
+         stopifnot (identical (c(rvalsn,c(N101=n+1L,N102=n+2L)), rvals2n))
+     }
+ 
+     stopifnot (identical (c(ivals,ivals), rep(ivals,times=2)))
+     stopifnot (identical (c(rvals,rvals), rep(rvals,times=2)))
+     stopifnot (identical (c(ivalsn,ivalsn), rep(ivalsn,times=2)))
+     stopifnot (identical (c(rvalsn,rvalsn), rep(rvalsn,times=2)))
+     
+     stopifnot (identical (c(ivals,ivals,ivals), rep(ivals,times=3)))
+     stopifnot (identical (c(rvals,rvals,rvals), rep(rvals,times=3)))
+     stopifnot (identical (c(ivalsn,ivalsn,ivalsn), rep(ivalsn,times=3)))
+     stopifnot (identical (c(rvalsn,rvalsn,rvalsn), rep(rvalsn,times=3)))
+     
+     stopifnot (identical (ivals, c(ivals[1..n/5],ivals[n/5+1..n])))
+     stopifnot (identical (rvals, c(rvals[1..n/5],rvals[n/5+1..n])))
+     stopifnot (identical (ivalsn, c(ivalsn[1..n/5],ivalsn[n/5+1..n])))
+     stopifnot (identical (rvalsn, c(rvalsn[1..n/5],rvalsn[n/5+1..n])))
+ 
+     stopifnot (identical (rvals, c(rvals[1..n/5],ivals[n/5+1..n])))
+     stopifnot (identical (rvalsn, c(rvalsn[1..n/5],ivalsn[n/5+1..n])))
+     
+     stopifnot (identical (ivals, c(ivals[1..n/5-1],n%/%5L,ivals[n/5+1..n])))
+     stopifnot (identical (rvals, c(rvals[1..n/5-1],n%/%5L,rvals[n/5+1..n])))
+     
+     if (n == 100) {
+         stopifnot (
+           identical (ivalsn, c(ivalsn[1..n/5-1],N20=n%/%5L,ivalsn[n/5+1..n])))
+         stopifnot (
+           identical (rvalsn, c(rvalsn[1..n/5-1],N20=n%/%5L,rvalsn[n/5+1..n])))
+     }
+     
+     stopifnot (
+       identical (ivals, 
+                  c(ivals[1..n/5],ivals[n/5+1..2*n/5],ivals[2*n/5+1..n])))
+     stopifnot (
+       identical (rvals, 
+                  c(rvals[1..n/5],rvals[n/5+1..2*n/5],rvals[2*n/5+1..n])))
+     stopifnot (
+       identical (ivalsn, 
+                  c(ivalsn[1..n/5],ivalsn[n/5+1..2*n/5],ivalsn[2*n/5+1..n])))
+     stopifnot (
+       identical (rvalsn, 
+                  c(rvalsn[1..n/5],rvalsn[n/5+1..2*n/5],rvalsn[2*n/5+1..n])))
+ }
c test, with n = 10 
c test, with n = 100 
c test, with n = 1000 
c test, with n = 10000 
c test, with n = 1000000 
> 
