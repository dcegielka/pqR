
pqR version 2.15.1 (2018-00-00), based on R 2.15.0 (2012-03-30)

R 2.15.0 is Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

Modifications to R in pqR are Copyright (C) 2013-2018 Radford M. Neal

Some modules are from R-2.15.1 or later versions distributed by the R Core Team

Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.


No helper threads, task merging enabled, uncompressed pointers.

> # Test matrix multiplication, with %*%, crossprod, and tcrossprod, by
> # BLAS and 'matprod' routines.
> #
> # Added for pqR, 2013, 2018 Radford M. Neal.
> 
> # Check matrix multiplication with various sizes of matrices, setting
> # matrix elements to random values that are integer multiples of 1/8 so
> # that floating point arithmetic will be exact (but accidental conversions
> # to integer will be detected).  The crossprod and tcrossprod routines
> # are also checked when give one argument (producing a symmetric result).
> #
> # Returns the last (largest) result matrix.
> 
> check_matprod <- function (print=TRUE)
+ { 
+   if (print) 
+   { cat("\n")
+     print(options()[c("mat_mult_with_BLAS","helpers_disable")])
+   }
+ 
+   # Matrix multiply the hard way, to check results.
+ 
+   matmult <- function (A,B)
+   { n <- nrow(A)
+     m <- ncol(B)
+     k <- ncol(A)
+     stopifnot(nrow(B)==k)
+     C <- matrix(0,n,m)
+     for (i in seq_len(n))
+     { for (j in seq_len(m))
+       { C[i,j] <- sum (A[i,] * B[,j])
+       }
+     }
+     C
+   }
+ 
+   # Do checks with given matrix sizes.
+ 
+   check <- function (n, m, k)
+   { A <- matrix (rgeom(n*k,0.1)/8, n, k)
+     B <- matrix (rgeom(k*m,0.1)/8, k, m)
+     C <- matmult(A,B)
+     C1 <- matmult(A,B+1)
+     C2 <- matmult(A,B)+2
+     At <- t(A)
+     Bt <- t(B)
+     stopifnot(identical(A%*%B,C))
+     stopifnot(identical(crossprod(At,B),C))
+     stopifnot(identical(tcrossprod(A,Bt),C))
+     stopifnot(identical(A%*%(B+1),C1))
+     stopifnot(identical(crossprod(At,B+1),C1))
+     stopifnot(identical(tcrossprod(A,Bt+1),C1))
+     stopifnot(identical(A%*%B+2,C2))
+     stopifnot(identical(crossprod(At,B)+2,C2))
+     stopifnot(identical(tcrossprod(A,Bt)+2,C2))
+     if (n==m) 
+     { D <- matmult(At,A)
+       stopifnot(identical(crossprod(A),D))
+       stopifnot(identical(tcrossprod(At),D))
+     }
+     C
+   }
+ 
+   # Try various sizes systematically.
+ 
+   cat("---- (0..11) (0..11) (0..11)\n")
+ 
+   for (n in 0..11)
+   { for (m in 0..11)
+     { for (k in 0..11)
+       { C <- check(n,m,k)
+       }
+     }
+   }
+ 
+   if (print)
+   { cat("\n")
+     print(C)
+   }
+ 
+   cat("---- n (1 2 3 4 5) m\n")
+ 
+   for (n in c(2,3,4,5,8,100,1000,2000,4000))
+   { for (m in c(2,3,4,5,8,100,1000,2000,4000))
+     { if (n*m <= 1000000)
+       { if (print) print(c(n,m))
+         for (k in c(1,2,3,4,5)) check(n,m,k)
+       }
+     }
+   }
+ 
+   cat("---- (1 2 3 4 5) k m\n")
+ 
+   for (k in c(2,3,4,5,8,100,1000,2000))
+   { for (m in c(2,3,4,5,8,100,1000,2000))
+     { if (k*m <= 1000000)
+       { if (print) print(c(k,m))
+         for (n in c(1,2,3,4,5)) check(n,m,k)
+       }
+     }
+   }
+ 
+   cat("---- random\n")
+ 
+   # Try various sizes randomly.  Can increase loop count for more testing
+   # by setting the environment variable R_MATPROD_TEST_COUNT (minimum 200).
+ 
+   set.seed(1)  # Set seed to get consistent results.
+ 
+   count <- as.integer(Sys.getenv("R_MATPROD_TEST_COUNT"))
+   if (is.na(count) || count < 200) count <- 200
+ 
+   for (i in 1..count)
+   {  n <- if (runif(1)<0.6) 15*rpois(1,10) + rpois(1,10) 
+           else if (runif(1)>0.93) 50*rpois(1,12) + rpois(1,30) 
+           else rpois(1,5)
+      m <- if (runif(1)<0.6) 15*rpois(1,10) + rpois(1,10) 
+           else if (runif(1)>0.93) 50*rpois(1,12) + rpois(1,30) 
+           else rpois(1,5)
+      k <- if (runif(1)<0.6) 15*rpois(1,10) + rpois(1,10) 
+           else if (runif(1)>0.93) 50*rpois(1,12) + rpois(1,30) 
+           else rpois(1,5)
+      if (n > 1200) n <- 1200
+      if (m > 1200) m <- 1200
+      if (k > 1200) k <- 1200
+      # Print n,m,k, but only for the first 200, so increasing the loop
+      # repetitions won't invalidate saved output.
+      if (print && i <= 200) print(c(n,m,k))
+      check(n,m,k)
+   }
+ }
> 
> # Check matrix products using BLAS and using 'matprod' routines, with
> # or without helper threads enabled.
> 
> sv <- options()[c("mat_mult_with_BLAS","helpers_disable")]
> 
> options(mat_mult_with_BLAS=FALSE,helpers_disable=FALSE)
> cat("\nNot BLAS, Helpers not disabled\n\n")

Not BLAS, Helpers not disabled

> check_matprod()

$mat_mult_with_BLAS
[1] FALSE FALSE FALSE FALSE

$helpers_disable
[1] FALSE

---- (0..11) (0..11) (0..11)

           [,1]      [,2]      [,3]      [,4]     [,5]      [,6]      [,7]
 [1,] 17.125000 13.843750  9.812500  9.125000 5.515625  7.062500  6.609375
 [2,] 47.343750 45.265625 12.015625 27.828125 8.687500 18.234375 24.437500
 [3,]  8.734375  6.046875  5.437500  3.828125 2.765625  4.296875  1.265625
 [4,] 17.890625 11.437500  8.359375  5.828125 2.343750  4.734375  7.609375
 [5,] 24.468750 17.171875 15.656250 10.984375 6.609375  8.687500  9.296875
 [6,] 26.953125 21.953125 10.437500 16.171875 8.593750  8.906250 13.656250
 [7,] 35.296875 31.984375 14.171875 18.203125 9.515625 16.171875 22.000000
 [8,] 35.953125 11.343750 23.250000 10.625000 5.187500  8.750000 10.843750
 [9,] 24.078125 18.078125 10.765625 11.625000 5.250000 10.234375 11.562500
[10,] 16.593750 16.859375  9.609375 13.234375 9.390625  7.812500  9.093750
[11,] 16.109375 11.718750 14.890625  6.281250 5.593750  7.875000  4.437500
           [,8]     [,9]     [,10]     [,11]
 [1,]  4.265625  9.09375 11.156250  8.921875
 [2,] 11.703125 20.98438 36.281250 25.109375
 [3,]  2.406250  6.46875  5.421875  3.078125
 [4,]  4.218750  8.43750  7.781250 12.843750
 [5,]  6.453125 17.70312 14.890625  8.562500
 [6,] 11.984375 15.28125 20.468750 12.828125
 [7,] 12.406250 26.15625 27.171875 25.500000
 [8,] 12.109375 11.25000 12.890625  7.234375
 [9,]  9.078125  7.03125 16.859375  7.734375
[10,] 13.453125 11.14062 19.140625 13.078125
[11,]  7.656250 15.64062 11.484375  5.687500
---- n (1 2 3 4 5) m
[1] 2 2
[1] 2 3
[1] 2 4
[1] 2 5
[1] 2 8
[1]   2 100
[1]    2 1000
[1]    2 2000
[1]    2 4000
[1] 3 2
[1] 3 3
[1] 3 4
[1] 3 5
[1] 3 8
[1]   3 100
[1]    3 1000
[1]    3 2000
[1]    3 4000
[1] 4 2
[1] 4 3
[1] 4 4
[1] 4 5
[1] 4 8
[1]   4 100
[1]    4 1000
[1]    4 2000
[1]    4 4000
[1] 5 2
[1] 5 3
[1] 5 4
[1] 5 5
[1] 5 8
[1]   5 100
[1]    5 1000
[1]    5 2000
[1]    5 4000
[1] 8 2
[1] 8 3
[1] 8 4
[1] 8 5
[1] 8 8
[1]   8 100
[1]    8 1000
[1]    8 2000
[1]    8 4000
[1] 100   2
[1] 100   3
[1] 100   4
[1] 100   5
[1] 100   8
[1] 100 100
[1]  100 1000
[1]  100 2000
[1]  100 4000
[1] 1000    2
[1] 1000    3
[1] 1000    4
[1] 1000    5
[1] 1000    8
[1] 1000  100
[1] 1000 1000
[1] 2000    2
[1] 2000    3
[1] 2000    4
[1] 2000    5
[1] 2000    8
[1] 2000  100
[1] 4000    2
[1] 4000    3
[1] 4000    4
[1] 4000    5
[1] 4000    8
[1] 4000  100
---- (1 2 3 4 5) k m
[1] 2 2
[1] 2 3
[1] 2 4
[1] 2 5
[1] 2 8
[1]   2 100
[1]    2 1000
[1]    2 2000
[1] 3 2
[1] 3 3
[1] 3 4
[1] 3 5
[1] 3 8
[1]   3 100
[1]    3 1000
[1]    3 2000
[1] 4 2
[1] 4 3
[1] 4 4
[1] 4 5
[1] 4 8
[1]   4 100
[1]    4 1000
[1]    4 2000
[1] 5 2
[1] 5 3
[1] 5 4
[1] 5 5
[1] 5 8
[1]   5 100
[1]    5 1000
[1]    5 2000
[1] 8 2
[1] 8 3
[1] 8 4
[1] 8 5
[1] 8 8
[1]   8 100
[1]    8 1000
[1]    8 2000
[1] 100   2
[1] 100   3
[1] 100   4
[1] 100   5
[1] 100   8
[1] 100 100
[1]  100 1000
[1]  100 2000
[1] 1000    2
[1] 1000    3
[1] 1000    4
[1] 1000    5
[1] 1000    8
[1] 1000  100
[1] 1000 1000
[1] 2000    2
[1] 2000    3
[1] 2000    4
[1] 2000    5
[1] 2000    8
[1] 2000  100
---- random
[1] 134 671   7
[1] 128   3   0
[1] 261 128 130
[1]   5 180 124
[1]   2 158   1
[1] 145  10 155
[1]   2 189 149
[1] 676 250 148
[1]   4 111   4
[1] 203 143 174
[1]   3   1 164
[1]   9 175   5
[1]   6 194 129
[1]   6 310 157
[1] 2 8 6
[1]   4 168  80
[1]   5 219 114
[1]  11 233   3
[1] 184 166 145
[1]   8 271   5
[1]   4 121 192
[1]   6 246   4
[1] 875  39 146
[1] 131 129 180
[1] 144 438   3
[1]  11 162   4
[1] 2 2 5
[1] 191 237 127
[1] 171   4 191
[1] 176 119 178
[1] 189 221 113
[1]  55 382   4
[1]   9 142   8
[1] 162  12   9
[1]   4   5 143
[1]   5   5 140
[1]   6   5 174
[1]   7 159 193
[1] 146 223 152
[1] 178 160   8
[1]   7 182   3
[1] 117 435   5
[1] 146 170 163
[1]   5   7 232
[1] 219   7 116
[1]   5 147   4
[1]   9 190   9
[1] 143 140 141
[1]   9   3 144
[1]  2 99  6
[1] 111 240   3
[1]  4 95  8
[1]   4 149 193
[1] 151 146  99
[1] 249 248 780
[1] 171 191 112
[1] 237   8 178
[1] 238 112 184
[1] 158 534 120
[1]   3   5 208
[1] 172   4  86
[1] 159  80 128
[1] 164  96   8
[1]   5 176   3
[1] 127 160  72
[1] 157   2   5
[1] 116   7   8
[1] 160 276 144
[1] 5 7 6
[1] 5 1 2
[1]   4 177 130
[1]   2 222 133
[1] 525 175   7
[1] 203   4   4
[1] 830  39 152
[1] 159   6 116
[1]  86 148 176
[1]   2 132  72
[1] 160 158   2
[1] 194   4 176
[1] 206 132 205
[1] 191 212   4
[1] 190   6 228
[1]   7  83 190
[1] 234 164 174
[1]   5 178 179
[1] 176 200 202
[1]   7   5 149
[1] 162   9 219
[1] 124 237 116
[1] 162   6 153
[1]   6 141 117
[1] 118   5   4
[1] 175 147   6
[1] 215 260  73
[1]   4 191   6
[1]   7 201 116
[1]  53   4 731
[1] 124 173 210
[1] 134 251   6
[1] 213 225 113
[1] 193 164   3
[1]   9 248 206
[1]   6 118   5
[1] 142 189 155
[1] 8 6 3
[1] 146 188 149
[1] 131  95   5
[1] 218 240 217
[1]   8 171   4
[1]   3   6 176
[1] 144 101 111
[1]   9   2 174
[1] 157   5 206
[1] 127 126 131
[1]   4 185  58
[1] 251 136 162
[1] 113   4   4
[1] 147 130  96
[1] 176 129 161
[1]   2 175 223
[1] 173   1   6
[1] 4 5 1
[1]   7 191 220
[1]   5   3 164
[1] 249 164 128
[1] 161   4 573
[1]   5   9 235
[1] 149 129 160
[1] 1 2 5
[1] 174 142 202
[1]  10 189 142
[1]   3 175 174
[1] 113 147 221
[1] 113   6 170
[1]   4 112 175
[1] 170   2   6
[1]   7   7 144
[1] 262   6   5
[1] 5 5 4
[1]   5   5 157
[1] 208 223   7
[1]  2 99  5
[1]   2 232  99
[1]   9   3 158
[1]   2 577 238
[1]   5 523 295
[1] 164   4   3
[1] 141 105  12
[1] 176   1 570
[1] 143 119 134
[1] 236   8   3
[1] 5 7 7
[1] 150 147 173
[1]   4 263 236
[1] 111   3   4
[1] 141 128   5
[1]   6  83 203
[1] 158 178 175
[1] 194 145 114
[1] 143 134  51
[1]  84 211 191
[1] 145   6   5
[1]   7   2 220
[1] 162 147 174
[1] 151   4 159
[1]   5   5 175
[1] 6 2 5
[1]   2 161 144
[1] 224 221 210
[1] 116 112   3
[1] 134   4   6
[1] 148   5 158
[1] 6 6 3
[1] 10  8  6
[1] 158 485   4
[1]   5 185   1
[1] 233   4   7
[1] 130 166 191
[1]   5 117  82
[1]   8   3 163
[1]   4 118 143
[1]  12 176   6
[1] 117   4 126
[1]   2 157   3
[1] 267   2 254
[1]  98 204   4
[1] 196   2  96
[1] 174 145  83
[1] 171   5 234
[1] 157 163   4
[1] 130 133 112
[1]   2 161 195
[1]   4 225 116
[1] 312  97 207
[1] 177 123 161
[1] 118 129   5
[1] 176   3   7
[1] 105   8 298
[1]   3  10 218
> 
> options(mat_mult_with_BLAS=FALSE,helpers_disable=TRUE)
> cat("\nNot BLAS, Helpers disabled\n\n")

Not BLAS, Helpers disabled

> check_matprod()

$mat_mult_with_BLAS
[1] FALSE FALSE FALSE FALSE

$helpers_disable
[1] TRUE

---- (0..11) (0..11) (0..11)

           [,1]     [,2]      [,3]     [,4]     [,5]      [,6]      [,7]
 [1,]  5.125000 10.67188 10.921875 12.53125 20.34375 12.890625  8.390625
 [2,]  5.812500 16.82812  4.968750 19.37500  7.00000 14.296875  7.609375
 [3,]  8.687500 15.70312 10.390625 20.26562 39.84375 27.421875 11.390625
 [4,]  5.062500  7.59375  9.375000 15.25000 14.18750 14.125000  8.593750
 [5,]  4.875000 13.92188  5.375000 11.03125 13.90625  8.609375  8.859375
 [6,]  9.859375 15.26562 11.093750 16.73438 29.98438 15.218750 13.343750
 [7,]  8.390625 11.28125 10.734375 15.21875 25.64062 11.671875 12.328125
 [8,]  9.375000 40.57812  4.484375 21.64062 19.93750 24.203125 11.968750
 [9,] 11.421875 12.75000 15.390625 21.73438 39.15625 10.328125 10.093750
[10,]  5.968750 13.48438  5.140625 13.92188 16.17188 12.796875  8.406250
[11,] 10.140625 13.75000  9.156250 15.20312 16.71875  7.296875  9.562500
          [,8]      [,9]     [,10]     [,11]
 [1,] 32.26562  9.265625 10.078125  8.984375
 [2,] 36.81250  9.453125 16.359375  7.218750
 [3,] 22.71875 16.546875 14.656250 14.078125
 [4,] 32.35938  6.750000 16.328125  6.687500
 [5,] 23.03125  9.734375  9.859375  5.000000
 [6,] 39.95312 13.875000 18.687500  7.812500
 [7,] 36.21875 13.875000 18.250000  6.531250
 [8,] 60.56250  9.156250 14.031250 12.812500
 [9,] 29.50000 20.187500 14.375000  8.296875
[10,] 23.50000 10.328125 10.171875  6.812500
[11,] 40.29688 13.359375 14.578125  7.859375
---- n (1 2 3 4 5) m
[1] 2 2
[1] 2 3
[1] 2 4
[1] 2 5
[1] 2 8
[1]   2 100
[1]    2 1000
[1]    2 2000
[1]    2 4000
[1] 3 2
[1] 3 3
[1] 3 4
[1] 3 5
[1] 3 8
[1]   3 100
[1]    3 1000
[1]    3 2000
[1]    3 4000
[1] 4 2
[1] 4 3
[1] 4 4
[1] 4 5
[1] 4 8
[1]   4 100
[1]    4 1000
[1]    4 2000
[1]    4 4000
[1] 5 2
[1] 5 3
[1] 5 4
[1] 5 5
[1] 5 8
[1]   5 100
[1]    5 1000
[1]    5 2000
[1]    5 4000
[1] 8 2
[1] 8 3
[1] 8 4
[1] 8 5
[1] 8 8
[1]   8 100
[1]    8 1000
[1]    8 2000
[1]    8 4000
[1] 100   2
[1] 100   3
[1] 100   4
[1] 100   5
[1] 100   8
[1] 100 100
[1]  100 1000
[1]  100 2000
[1]  100 4000
[1] 1000    2
[1] 1000    3
[1] 1000    4
[1] 1000    5
[1] 1000    8
[1] 1000  100
[1] 1000 1000
[1] 2000    2
[1] 2000    3
[1] 2000    4
[1] 2000    5
[1] 2000    8
[1] 2000  100
[1] 4000    2
[1] 4000    3
[1] 4000    4
[1] 4000    5
[1] 4000    8
[1] 4000  100
---- (1 2 3 4 5) k m
[1] 2 2
[1] 2 3
[1] 2 4
[1] 2 5
[1] 2 8
[1]   2 100
[1]    2 1000
[1]    2 2000
[1] 3 2
[1] 3 3
[1] 3 4
[1] 3 5
[1] 3 8
[1]   3 100
[1]    3 1000
[1]    3 2000
[1] 4 2
[1] 4 3
[1] 4 4
[1] 4 5
[1] 4 8
[1]   4 100
[1]    4 1000
[1]    4 2000
[1] 5 2
[1] 5 3
[1] 5 4
[1] 5 5
[1] 5 8
[1]   5 100
[1]    5 1000
[1]    5 2000
[1] 8 2
[1] 8 3
[1] 8 4
[1] 8 5
[1] 8 8
[1]   8 100
[1]    8 1000
[1]    8 2000
[1] 100   2
[1] 100   3
[1] 100   4
[1] 100   5
[1] 100   8
[1] 100 100
[1]  100 1000
[1]  100 2000
[1] 1000    2
[1] 1000    3
[1] 1000    4
[1] 1000    5
[1] 1000    8
[1] 1000  100
[1] 1000 1000
[1] 2000    2
[1] 2000    3
[1] 2000    4
[1] 2000    5
[1] 2000    8
[1] 2000  100
---- random
[1] 134 671   7
[1] 128   3   0
[1] 261 128 130
[1]   5 180 124
[1]   2 158   1
[1] 145  10 155
[1]   2 189 149
[1] 676 250 148
[1]   4 111   4
[1] 203 143 174
[1]   3   1 164
[1]   9 175   5
[1]   6 194 129
[1]   6 310 157
[1] 2 8 6
[1]   4 168  80
[1]   5 219 114
[1]  11 233   3
[1] 184 166 145
[1]   8 271   5
[1]   4 121 192
[1]   6 246   4
[1] 875  39 146
[1] 131 129 180
[1] 144 438   3
[1]  11 162   4
[1] 2 2 5
[1] 191 237 127
[1] 171   4 191
[1] 176 119 178
[1] 189 221 113
[1]  55 382   4
[1]   9 142   8
[1] 162  12   9
[1]   4   5 143
[1]   5   5 140
[1]   6   5 174
[1]   7 159 193
[1] 146 223 152
[1] 178 160   8
[1]   7 182   3
[1] 117 435   5
[1] 146 170 163
[1]   5   7 232
[1] 219   7 116
[1]   5 147   4
[1]   9 190   9
[1] 143 140 141
[1]   9   3 144
[1]  2 99  6
[1] 111 240   3
[1]  4 95  8
[1]   4 149 193
[1] 151 146  99
[1] 249 248 780
[1] 171 191 112
[1] 237   8 178
[1] 238 112 184
[1] 158 534 120
[1]   3   5 208
[1] 172   4  86
[1] 159  80 128
[1] 164  96   8
[1]   5 176   3
[1] 127 160  72
[1] 157   2   5
[1] 116   7   8
[1] 160 276 144
[1] 5 7 6
[1] 5 1 2
[1]   4 177 130
[1]   2 222 133
[1] 525 175   7
[1] 203   4   4
[1] 830  39 152
[1] 159   6 116
[1]  86 148 176
[1]   2 132  72
[1] 160 158   2
[1] 194   4 176
[1] 206 132 205
[1] 191 212   4
[1] 190   6 228
[1]   7  83 190
[1] 234 164 174
[1]   5 178 179
[1] 176 200 202
[1]   7   5 149
[1] 162   9 219
[1] 124 237 116
[1] 162   6 153
[1]   6 141 117
[1] 118   5   4
[1] 175 147   6
[1] 215 260  73
[1]   4 191   6
[1]   7 201 116
[1]  53   4 731
[1] 124 173 210
[1] 134 251   6
[1] 213 225 113
[1] 193 164   3
[1]   9 248 206
[1]   6 118   5
[1] 142 189 155
[1] 8 6 3
[1] 146 188 149
[1] 131  95   5
[1] 218 240 217
[1]   8 171   4
[1]   3   6 176
[1] 144 101 111
[1]   9   2 174
[1] 157   5 206
[1] 127 126 131
[1]   4 185  58
[1] 251 136 162
[1] 113   4   4
[1] 147 130  96
[1] 176 129 161
[1]   2 175 223
[1] 173   1   6
[1] 4 5 1
[1]   7 191 220
[1]   5   3 164
[1] 249 164 128
[1] 161   4 573
[1]   5   9 235
[1] 149 129 160
[1] 1 2 5
[1] 174 142 202
[1]  10 189 142
[1]   3 175 174
[1] 113 147 221
[1] 113   6 170
[1]   4 112 175
[1] 170   2   6
[1]   7   7 144
[1] 262   6   5
[1] 5 5 4
[1]   5   5 157
[1] 208 223   7
[1]  2 99  5
[1]   2 232  99
[1]   9   3 158
[1]   2 577 238
[1]   5 523 295
[1] 164   4   3
[1] 141 105  12
[1] 176   1 570
[1] 143 119 134
[1] 236   8   3
[1] 5 7 7
[1] 150 147 173
[1]   4 263 236
[1] 111   3   4
[1] 141 128   5
[1]   6  83 203
[1] 158 178 175
[1] 194 145 114
[1] 143 134  51
[1]  84 211 191
[1] 145   6   5
[1]   7   2 220
[1] 162 147 174
[1] 151   4 159
[1]   5   5 175
[1] 6 2 5
[1]   2 161 144
[1] 224 221 210
[1] 116 112   3
[1] 134   4   6
[1] 148   5 158
[1] 6 6 3
[1] 10  8  6
[1] 158 485   4
[1]   5 185   1
[1] 233   4   7
[1] 130 166 191
[1]   5 117  82
[1]   8   3 163
[1]   4 118 143
[1]  12 176   6
[1] 117   4 126
[1]   2 157   3
[1] 267   2 254
[1]  98 204   4
[1] 196   2  96
[1] 174 145  83
[1] 171   5 234
[1] 157 163   4
[1] 130 133 112
[1]   2 161 195
[1]   4 225 116
[1] 312  97 207
[1] 177 123 161
[1] 118 129   5
[1] 176   3   7
[1] 105   8 298
[1]   3  10 218
> 
> if (identical(Sys.getenv("R_MATPROD_TEST_BLAS"),"TRUE")) {
+ 
+     cat("\nBLAS, Helpers not disabled\n\n")
+     options(mat_mult_with_BLAS=TRUE,helpers_disable=FALSE)
+     check_matprod(print=FALSE)
+ 
+     cat("\nBLAS, Helpers disabled\n\n")
+     options(mat_mult_with_BLAS=TRUE,helpers_disable=TRUE)
+     check_matprod(print=FALSE)
+ }
> 
> options(sv)
> 
