
pqR version 2.15.1 (2017-06-09), based on R 2.15.0 (2012-03-30)

R 2.15.0 is Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

Modifications to R in pqR are Copyright (C) 2013-2017 Radford M. Neal

Some modules are from R-2.15.1 or later versions distributed by the R Core Team

Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.


No helper threads, task merging enabled, uncompressed pointers.

> # Test matrix multiplication, with %*%, crossprod, and tcrossprod, by
> # BLAS and 'matprod' routines.
> #
> # Added for pqR, 2013, 2018 Radford M. Neal.
> 
> # Check matrix multiplication with various sizes of matrices, setting
> # matrix elements to random values that are integer multiples of 1/8 so
> # that floating point arithmetic will be exact (but accidental conversions
> # to integer will be detected).  The crossprod and tcrossprod routines
> # are also checked when give one argument (producing a symmetric result).
> #
> # Returns the last (largest) result matrix.
> 
> check_matprod <- function (print=TRUE)
+ { 
+   if (print) 
+   { cat("\n")
+     print(options()[c("mat_mult_with_BLAS","helpers_disable")])
+   }
+ 
+   # Matrix multiply the hard way, to check results.
+ 
+   matmult <- function (A,B)
+   { n <- nrow(A)
+     m <- ncol(B)
+     k <- ncol(A)
+     stopifnot(nrow(B)==k)
+     C <- matrix(0,n,m)
+     for (i in seq_len(n))
+     { for (j in seq_len(m))
+       { C[i,j] <- sum (A[i,] * B[,j])
+       }
+     }
+     C
+   }
+ 
+   # Do checks with given matrix sizes.
+ 
+   check <- function (n, m, k)
+   { A <- matrix (rgeom(n*k,0.1)/8, n, k)
+     B <- matrix (rgeom(k*m,0.1)/8, k, m)
+     C <- matmult(A,B)
+     C1 <- matmult(A,B+1)
+     C2 <- matmult(A,B)+2
+     At <- t(A)
+     Bt <- t(B)
+     stopifnot(identical(A%*%B,C))
+     stopifnot(identical(crossprod(At,B),C))
+     stopifnot(identical(tcrossprod(A,Bt),C))
+     stopifnot(identical(A%*%(B+1),C1))
+     stopifnot(identical(crossprod(At,B+1),C1))
+     stopifnot(identical(tcrossprod(A,Bt+1),C1))
+     stopifnot(identical(A%*%B+2,C2))
+     stopifnot(identical(crossprod(At,B)+2,C2))
+     stopifnot(identical(tcrossprod(A,Bt)+2,C2))
+     if (n==m) 
+     { D <- matmult(At,A)
+       stopifnot(identical(crossprod(A),D))
+       stopifnot(identical(tcrossprod(At),D))
+     }
+     C
+   }
+ 
+   # Set seed to get consistent results.
+ 
+   set.seed(1)
+ 
+   # Try various sizes systematically.
+ 
+   cat("---- (0..11) (0..11) (0..11)\n")
+ 
+   for (n in 0..11)
+   { for (m in 0..11)
+     { for (k in 0..11)
+       { C <- check(n,m,k)
+       }
+     }
+   }
+ 
+   if (print)
+   { cat("\n")
+     print(C)
+   }
+ 
+   cat("---- n (1 2 3 4 5) m\n")
+ 
+   for (n in c(2,3,4,5,8,100,1000,2000,4000))
+   { for (m in c(2,3,4,5,8,100,1000,2000,4000))
+     { if (n*m <= 1000000)
+       { if (print) print(c(n,m))
+         for (k in c(1,2,3,4,5)) check(n,m,k)
+       }
+     }
+   }
+ 
+   cat("---- (1 2 3 4 5) k m\n")
+ 
+   for (k in c(2,3,4,5,8,100,1000,2000))
+   { for (m in c(2,3,4,5,8,100,1000,2000))
+     { if (k*m <= 1000000)
+       { if (print) print(c(k,m))
+         for (n in c(1,2,3,4,5)) check(n,m,k)
+       }
+     }
+   }
+ 
+   cat("---- random\n")
+ 
+   # Try various sizes randomly.  Can increase loop count for more testing
+   # by setting the environment variable R_MATPROD_TEST_COUNT (minimum 200).
+ 
+   count <- as.integer(Sys.getenv("R_MATPROD_TEST_COUNT"))
+   if (is.na(count) || count < 200) count <- 200
+ 
+   for (i in 1..count)
+   {  n <- if (runif(1)<0.6) 15*rpois(1,10) + rpois(1,10) 
+           else if (runif(1)>0.93) 50*rpois(1,12) + rpois(1,30) 
+           else rpois(1,5)
+      m <- if (runif(1)<0.6) 15*rpois(1,10) + rpois(1,10) 
+           else if (runif(1)>0.93) 50*rpois(1,12) + rpois(1,30) 
+           else rpois(1,5)
+      k <- if (runif(1)<0.6) 15*rpois(1,10) + rpois(1,10) 
+           else if (runif(1)>0.93) 50*rpois(1,12) + rpois(1,30) 
+           else rpois(1,5)
+      if (n > 1200) n <- 1200
+      if (m > 1200) m <- 1200
+      if (k > 1200) k <- 1200
+      # Print n,m,k, but only for the first 200, so increasing the loop
+      # repetitions won't invalidate saved output.
+      if (print && i <= 200) print(c(n,m,k))
+      check(n,m,k)
+   }
+ }
> 
> # Check matrix products using BLAS and using 'matprod' routines, with
> # or without helper threads enabled.
> 
> sv <- options()[c("mat_mult_with_BLAS","helpers_disable")]
> 
> options(mat_mult_with_BLAS=FALSE,helpers_disable=FALSE)
> cat("\nNot BLAS, Helpers not disabled\n\n")

Not BLAS, Helpers not disabled

> check_matprod()

$mat_mult_with_BLAS
[1] FALSE FALSE FALSE FALSE

$helpers_disable
[1] FALSE

---- (0..11) (0..11) (0..11)

          [,1]      [,2]     [,3]      [,4]     [,5]      [,6]      [,7]
 [1,] 6.859375  8.890625 15.98438 15.484375  9.78125  6.781250  7.781250
 [2,] 3.500000  7.921875 12.25000 13.421875  9.21875  8.406250 10.265625
 [3,] 3.375000 10.328125 49.25000 21.859375 40.85938 14.953125 21.718750
 [4,] 1.000000 10.687500 31.53125 22.625000 20.98438 12.281250 23.859375
 [5,] 4.875000 10.265625 34.32812 25.171875 36.50000 13.968750 12.015625
 [6,] 1.593750  8.656250 16.65625 18.484375 16.64062  9.406250 24.296875
 [7,] 2.406250  4.109375 14.06250  6.312500 11.81250  4.703125  6.203125
 [8,] 2.171875  7.468750 14.48438 23.593750 16.35938  8.046875 10.609375
 [9,] 3.906250  7.281250 26.96875 20.218750 27.60938  9.281250 12.671875
[10,] 2.750000  7.781250 19.46875  7.390625 22.39062 11.812500  7.453125
[11,] 2.437500  7.281250 21.40625 18.312500 29.15625  8.140625  9.796875
           [,8]      [,9]     [,10]     [,11]
 [1,] 11.796875 10.281250 13.546875  5.140625
 [2,]  6.203125 10.937500 11.578125  5.609375
 [3,]  4.484375 25.421875 15.984375 21.546875
 [4,]  8.546875 22.468750 15.359375 18.234375
 [5,]  5.703125 30.281250 24.937500 18.296875
 [6,]  7.000000 13.937500 11.218750 11.015625
 [7,]  3.500000  8.828125  4.421875  6.093750
 [8,]  2.859375 18.437500 35.046875  7.718750
 [9,]  7.984375 17.375000 15.796875 15.984375
[10,]  2.968750 15.406250  5.000000 11.921875
[11,] 16.500000 19.500000  8.953125 22.812500
---- n (1 2 3 4 5) m
[1] 2 2
[1] 2 3
[1] 2 4
[1] 2 5
[1] 2 8
[1]   2 100
[1]    2 1000
[1]    2 2000
[1]    2 4000
[1] 3 2
[1] 3 3
[1] 3 4
[1] 3 5
[1] 3 8
[1]   3 100
[1]    3 1000
[1]    3 2000
[1]    3 4000
[1] 4 2
[1] 4 3
[1] 4 4
[1] 4 5
[1] 4 8
[1]   4 100
[1]    4 1000
[1]    4 2000
[1]    4 4000
[1] 5 2
[1] 5 3
[1] 5 4
[1] 5 5
[1] 5 8
[1]   5 100
[1]    5 1000
[1]    5 2000
[1]    5 4000
[1] 8 2
[1] 8 3
[1] 8 4
[1] 8 5
[1] 8 8
[1]   8 100
[1]    8 1000
[1]    8 2000
[1]    8 4000
[1] 100   2
[1] 100   3
[1] 100   4
[1] 100   5
[1] 100   8
[1] 100 100
[1]  100 1000
[1]  100 2000
[1]  100 4000
[1] 1000    2
[1] 1000    3
[1] 1000    4
[1] 1000    5
[1] 1000    8
[1] 1000  100
[1] 1000 1000
[1] 2000    2
[1] 2000    3
[1] 2000    4
[1] 2000    5
[1] 2000    8
[1] 2000  100
[1] 4000    2
[1] 4000    3
[1] 4000    4
[1] 4000    5
[1] 4000    8
[1] 4000  100
---- (1 2 3 4 5) k m
[1] 2 2
[1] 2 3
[1] 2 4
[1] 2 5
[1] 2 8
[1]   2 100
[1]    2 1000
[1]    2 2000
[1] 3 2
[1] 3 3
[1] 3 4
[1] 3 5
[1] 3 8
[1]   3 100
[1]    3 1000
[1]    3 2000
[1] 4 2
[1] 4 3
[1] 4 4
[1] 4 5
[1] 4 8
[1]   4 100
[1]    4 1000
[1]    4 2000
[1] 5 2
[1] 5 3
[1] 5 4
[1] 5 5
[1] 5 8
[1]   5 100
[1]    5 1000
[1]    5 2000
[1] 8 2
[1] 8 3
[1] 8 4
[1] 8 5
[1] 8 8
[1]   8 100
[1]    8 1000
[1]    8 2000
[1] 100   2
[1] 100   3
[1] 100   4
[1] 100   5
[1] 100   8
[1] 100 100
[1]  100 1000
[1]  100 2000
[1] 1000    2
[1] 1000    3
[1] 1000    4
[1] 1000    5
[1] 1000    8
[1] 1000  100
[1] 1000 1000
[1] 2000    2
[1] 2000    3
[1] 2000    4
[1] 2000    5
[1] 2000    8
[1] 2000  100
---- random
[1]   4   4 179
[1]   6   2 135
[1]   6 239  87
[1] 236   4 114
[1] 151   4 113
[1] 172   2 211
[1]   4 166   3
[1] 146   9  99
[1]   6 143  97
[1] 128  67 159
[1]   3   5 188
[1]   3   2 173
[1]  85 130 147
[1]   6 121 204
[1]   5 186 117
[1] 623 206   2
[1]   4 190   4
[1]   6 234   9
[1] 252   3 237
[1] 2 3 5
[1] 188 143 266
[1] 180   3   5
[1]   5 166 132
[1] 188 189   4
[1] 142   2 115
[1]   5 177 222
[1] 145   8 189
[1]   3 200   4
[1] 208   8   5
[1]   4   5 103
[1]  95 146 159
[1] 210 186   1
[1] 126 159 157
[1]   3 203 218
[1] 124 219 143
[1] 170   3 186
[1] 141   7 133
[1] 683 159 125
[1] 177   5 187
[1]   5 174 157
[1] 174 187 176
[1] 206 148 206
[1]   2   4 133
[1] 205  83   8
[1]  4 12  5
[1] 70  1  6
[1] 238   4 112
[1] 193   7  10
[1]   3 143 188
[1] 282  89 192
[1] 233 233 145
[1] 147 202   4
[1] 224   4 200
[1] 2 5 5
[1]  98 130 160
[1] 175 238  83
[1] 187   5 266
[1] 174   7 131
[1] 155 129 218
[1] 128   6   9
[1]   6 130 188
[1] 143 119   4
[1] 126 222 144
[1] 129   6  86
[1]   5 176 163
[1]   4 278 157
[1] 100 101 175
[1]   9 131 208
[1]   3   4 115
[1] 173   8   6
[1] 127 110 129
[1] 931   1   8
[1] 112 159 151
[1] 131  71 114
[1]  96 205 129
[1] 189   4 113
[1]  81 193   7
[1] 261 160 188
[1] 135 130 132
[1]   4 159   4
[1] 210  96 226
[1] 163 146   5
[1] 276 100 157
[1] 135 203 145
[1] 4 3 7
[1]   2 142   3
[1]   4 191 186
[1] 116 167 201
[1] 208 101  85
[1]   5 145 130
[1] 142 117 171
[1]   5   7 188
[1] 236   7 235
[1]  82 159 157
[1] 224   8   5
[1] 143 173   4
[1] 147  72   9
[1] 252   7 203
[1] 190  10   4
[1]   6 190 189
[1] 113   3 121
[1]   1 222   4
[1]   4 161   2
[1]   5 473   4
[1]  14 174 110
[1] 101 193 131
[1]  4 70  7
[1] 226   4 176
[1] 791   4   2
[1]   6 131 101
[1] 84  4  7
[1] 209 118 207
[1] 131   5   5
[1] 215 828 214
[1]   7 126 833
[1] 423   3 144
[1] 81 73  5
[1]  68 100   4
[1] 100   6   5
[1]  96   3 116
[1]   5 148  68
[1]   5 158 175
[1]   8   5 244
[1] 173   8   6
[1] 190 224   4
[1]   6 179   7
[1] 147 165 115
[1] 233 113   5
[1] 118 132   5
[1] 131 146 102
[1]   6 146  99
[1]  97   3 192
[1] 393 127 140
[1] 130  67 329
[1] 145 266 234
[1] 254   8   8
[1] 175   2   7
[1] 236   1   2
[1] 208 149   4
[1] 130 129   7
[1] 3 7 4
[1] 125 156   7
[1]   4   6 135
[1] 102   2   6
[1]   4   9 149
[1]   6 160 162
[1]  98 249 173
[1] 191 222   7
[1] 131   2   5
[1] 159 157 160
[1]  85 238 185
[1] 160 233 156
[1] 247   6   4
[1] 239 113   3
[1] 188 129   4
[1] 174   6   6
[1] 208 221   3
[1] 130 247 326
[1]  53 149 205
[1] 224 177 171
[1] 174  97 116
[1] 6 7 6
[1] 143 190 157
[1] 204 159 114
[1] 789 188   7
[1]   5 187 131
[1] 2 9 3
[1] 157   3 129
[1]  73 307   7
[1] 190 522 172
[1]   3 145   8
[1] 98  5  3
[1] 2 4 2
[1] 252   5 100
[1]   6   1 129
[1]   3 101 187
[1]   7 159 187
[1] 158   1   3
[1] 147 204   6
[1]   7   3 158
[1] 147   8   3
[1] 128   4 206
[1] 2 6 5
[1] 111 218 162
[1]   2 149 247
[1] 165 176   8
[1] 265 205   2
[1] 149   6 107
[1]   5   5 224
[1] 187 207 119
[1] 112 130   5
[1] 220 222   1
[1]  6  8 82
[1]   5 157   3
[1]   5 174   5
[1] 251 157 218
[1]   3 287 270
[1] 163   2  88
[1] 119 161   4
[1] 3 9 6
> 
> options(mat_mult_with_BLAS=FALSE,helpers_disable=TRUE)
> cat("\nNot BLAS, Helpers disabled\n\n")

Not BLAS, Helpers disabled

> check_matprod()

$mat_mult_with_BLAS
[1] FALSE FALSE FALSE FALSE

$helpers_disable
[1] TRUE

---- (0..11) (0..11) (0..11)

          [,1]      [,2]     [,3]      [,4]     [,5]      [,6]      [,7]
 [1,] 6.859375  8.890625 15.98438 15.484375  9.78125  6.781250  7.781250
 [2,] 3.500000  7.921875 12.25000 13.421875  9.21875  8.406250 10.265625
 [3,] 3.375000 10.328125 49.25000 21.859375 40.85938 14.953125 21.718750
 [4,] 1.000000 10.687500 31.53125 22.625000 20.98438 12.281250 23.859375
 [5,] 4.875000 10.265625 34.32812 25.171875 36.50000 13.968750 12.015625
 [6,] 1.593750  8.656250 16.65625 18.484375 16.64062  9.406250 24.296875
 [7,] 2.406250  4.109375 14.06250  6.312500 11.81250  4.703125  6.203125
 [8,] 2.171875  7.468750 14.48438 23.593750 16.35938  8.046875 10.609375
 [9,] 3.906250  7.281250 26.96875 20.218750 27.60938  9.281250 12.671875
[10,] 2.750000  7.781250 19.46875  7.390625 22.39062 11.812500  7.453125
[11,] 2.437500  7.281250 21.40625 18.312500 29.15625  8.140625  9.796875
           [,8]      [,9]     [,10]     [,11]
 [1,] 11.796875 10.281250 13.546875  5.140625
 [2,]  6.203125 10.937500 11.578125  5.609375
 [3,]  4.484375 25.421875 15.984375 21.546875
 [4,]  8.546875 22.468750 15.359375 18.234375
 [5,]  5.703125 30.281250 24.937500 18.296875
 [6,]  7.000000 13.937500 11.218750 11.015625
 [7,]  3.500000  8.828125  4.421875  6.093750
 [8,]  2.859375 18.437500 35.046875  7.718750
 [9,]  7.984375 17.375000 15.796875 15.984375
[10,]  2.968750 15.406250  5.000000 11.921875
[11,] 16.500000 19.500000  8.953125 22.812500
---- n (1 2 3 4 5) m
[1] 2 2
[1] 2 3
[1] 2 4
[1] 2 5
[1] 2 8
[1]   2 100
[1]    2 1000
[1]    2 2000
[1]    2 4000
[1] 3 2
[1] 3 3
[1] 3 4
[1] 3 5
[1] 3 8
[1]   3 100
[1]    3 1000
[1]    3 2000
[1]    3 4000
[1] 4 2
[1] 4 3
[1] 4 4
[1] 4 5
[1] 4 8
[1]   4 100
[1]    4 1000
[1]    4 2000
[1]    4 4000
[1] 5 2
[1] 5 3
[1] 5 4
[1] 5 5
[1] 5 8
[1]   5 100
[1]    5 1000
[1]    5 2000
[1]    5 4000
[1] 8 2
[1] 8 3
[1] 8 4
[1] 8 5
[1] 8 8
[1]   8 100
[1]    8 1000
[1]    8 2000
[1]    8 4000
[1] 100   2
[1] 100   3
[1] 100   4
[1] 100   5
[1] 100   8
[1] 100 100
[1]  100 1000
[1]  100 2000
[1]  100 4000
[1] 1000    2
[1] 1000    3
[1] 1000    4
[1] 1000    5
[1] 1000    8
[1] 1000  100
[1] 1000 1000
[1] 2000    2
[1] 2000    3
[1] 2000    4
[1] 2000    5
[1] 2000    8
[1] 2000  100
[1] 4000    2
[1] 4000    3
[1] 4000    4
[1] 4000    5
[1] 4000    8
[1] 4000  100
---- (1 2 3 4 5) k m
[1] 2 2
[1] 2 3
[1] 2 4
[1] 2 5
[1] 2 8
[1]   2 100
[1]    2 1000
[1]    2 2000
[1] 3 2
[1] 3 3
[1] 3 4
[1] 3 5
[1] 3 8
[1]   3 100
[1]    3 1000
[1]    3 2000
[1] 4 2
[1] 4 3
[1] 4 4
[1] 4 5
[1] 4 8
[1]   4 100
[1]    4 1000
[1]    4 2000
[1] 5 2
[1] 5 3
[1] 5 4
[1] 5 5
[1] 5 8
[1]   5 100
[1]    5 1000
[1]    5 2000
[1] 8 2
[1] 8 3
[1] 8 4
[1] 8 5
[1] 8 8
[1]   8 100
[1]    8 1000
[1]    8 2000
[1] 100   2
[1] 100   3
[1] 100   4
[1] 100   5
[1] 100   8
[1] 100 100
[1]  100 1000
[1]  100 2000
[1] 1000    2
[1] 1000    3
[1] 1000    4
[1] 1000    5
[1] 1000    8
[1] 1000  100
[1] 1000 1000
[1] 2000    2
[1] 2000    3
[1] 2000    4
[1] 2000    5
[1] 2000    8
[1] 2000  100
---- random
[1]   4   4 179
[1]   6   2 135
[1]   6 239  87
[1] 236   4 114
[1] 151   4 113
[1] 172   2 211
[1]   4 166   3
[1] 146   9  99
[1]   6 143  97
[1] 128  67 159
[1]   3   5 188
[1]   3   2 173
[1]  85 130 147
[1]   6 121 204
[1]   5 186 117
[1] 623 206   2
[1]   4 190   4
[1]   6 234   9
[1] 252   3 237
[1] 2 3 5
[1] 188 143 266
[1] 180   3   5
[1]   5 166 132
[1] 188 189   4
[1] 142   2 115
[1]   5 177 222
[1] 145   8 189
[1]   3 200   4
[1] 208   8   5
[1]   4   5 103
[1]  95 146 159
[1] 210 186   1
[1] 126 159 157
[1]   3 203 218
[1] 124 219 143
[1] 170   3 186
[1] 141   7 133
[1] 683 159 125
[1] 177   5 187
[1]   5 174 157
[1] 174 187 176
[1] 206 148 206
[1]   2   4 133
[1] 205  83   8
[1]  4 12  5
[1] 70  1  6
[1] 238   4 112
[1] 193   7  10
[1]   3 143 188
[1] 282  89 192
[1] 233 233 145
[1] 147 202   4
[1] 224   4 200
[1] 2 5 5
[1]  98 130 160
[1] 175 238  83
[1] 187   5 266
[1] 174   7 131
[1] 155 129 218
[1] 128   6   9
[1]   6 130 188
[1] 143 119   4
[1] 126 222 144
[1] 129   6  86
[1]   5 176 163
[1]   4 278 157
[1] 100 101 175
[1]   9 131 208
[1]   3   4 115
[1] 173   8   6
[1] 127 110 129
[1] 931   1   8
[1] 112 159 151
[1] 131  71 114
[1]  96 205 129
[1] 189   4 113
[1]  81 193   7
[1] 261 160 188
[1] 135 130 132
[1]   4 159   4
[1] 210  96 226
[1] 163 146   5
[1] 276 100 157
[1] 135 203 145
[1] 4 3 7
[1]   2 142   3
[1]   4 191 186
[1] 116 167 201
[1] 208 101  85
[1]   5 145 130
[1] 142 117 171
[1]   5   7 188
[1] 236   7 235
[1]  82 159 157
[1] 224   8   5
[1] 143 173   4
[1] 147  72   9
[1] 252   7 203
[1] 190  10   4
[1]   6 190 189
[1] 113   3 121
[1]   1 222   4
[1]   4 161   2
[1]   5 473   4
[1]  14 174 110
[1] 101 193 131
[1]  4 70  7
[1] 226   4 176
[1] 791   4   2
[1]   6 131 101
[1] 84  4  7
[1] 209 118 207
[1] 131   5   5
[1] 215 828 214
[1]   7 126 833
[1] 423   3 144
[1] 81 73  5
[1]  68 100   4
[1] 100   6   5
[1]  96   3 116
[1]   5 148  68
[1]   5 158 175
[1]   8   5 244
[1] 173   8   6
[1] 190 224   4
[1]   6 179   7
[1] 147 165 115
[1] 233 113   5
[1] 118 132   5
[1] 131 146 102
[1]   6 146  99
[1]  97   3 192
[1] 393 127 140
[1] 130  67 329
[1] 145 266 234
[1] 254   8   8
[1] 175   2   7
[1] 236   1   2
[1] 208 149   4
[1] 130 129   7
[1] 3 7 4
[1] 125 156   7
[1]   4   6 135
[1] 102   2   6
[1]   4   9 149
[1]   6 160 162
[1]  98 249 173
[1] 191 222   7
[1] 131   2   5
[1] 159 157 160
[1]  85 238 185
[1] 160 233 156
[1] 247   6   4
[1] 239 113   3
[1] 188 129   4
[1] 174   6   6
[1] 208 221   3
[1] 130 247 326
[1]  53 149 205
[1] 224 177 171
[1] 174  97 116
[1] 6 7 6
[1] 143 190 157
[1] 204 159 114
[1] 789 188   7
[1]   5 187 131
[1] 2 9 3
[1] 157   3 129
[1]  73 307   7
[1] 190 522 172
[1]   3 145   8
[1] 98  5  3
[1] 2 4 2
[1] 252   5 100
[1]   6   1 129
[1]   3 101 187
[1]   7 159 187
[1] 158   1   3
[1] 147 204   6
[1]   7   3 158
[1] 147   8   3
[1] 128   4 206
[1] 2 6 5
[1] 111 218 162
[1]   2 149 247
[1] 165 176   8
[1] 265 205   2
[1] 149   6 107
[1]   5   5 224
[1] 187 207 119
[1] 112 130   5
[1] 220 222   1
[1]  6  8 82
[1]   5 157   3
[1]   5 174   5
[1] 251 157 218
[1]   3 287 270
[1] 163   2  88
[1] 119 161   4
[1] 3 9 6
> 
> if (identical(Sys.getenv("R_MATPROD_TEST_BLAS"),"TRUE")) {
+ 
+     cat("\nBLAS, Helpers not disabled\n\n")
+     options(mat_mult_with_BLAS=TRUE,helpers_disable=FALSE)
+     check_matprod(print=FALSE)
+ 
+     cat("\nBLAS, Helpers disabled\n\n")
+     options(mat_mult_with_BLAS=TRUE,helpers_disable=TRUE)
+     check_matprod(print=FALSE)
+ }
> 
> options(sv)
> 
