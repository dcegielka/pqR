
pqR version 2.15.1 (2018-11-02), based on R 2.15.0 (2012-03-30)

R 2.15.0 is Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

Modifications to R in pqR are Copyright (C) 2013-2018 Radford M. Neal

Some modules are from R-2.15.1 or later versions distributed by the R Core Team

Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.


No helper threads, task merging enabled, uncompressed pointers.

> # Test matrix multiplication, with %*%, crossprod, and tcrossprod, by
> # BLAS and 'matprod' routines.
> #
> # Added for pqR, 2013, 2018 Radford M. Neal.
> 
> # Check matrix multiplication with various sizes of matrices, setting
> # matrix elements to random values that are integer multiples of 1/8 so
> # that floating point arithmetic will be exact (but accidental conversions
> # to integer will be detected).  The crossprod and tcrossprod routines
> # are also checked when give one argument (producing a symmetric result).
> #
> # Returns the last (largest) result matrix.
> 
> check_matprod <- function (print=TRUE)
+ { 
+   if (print) 
+   { cat("\n")
+     print(options()[c("mat_mult_with_BLAS","helpers_disable")])
+   }
+ 
+   # Matrix multiply the hard way, to check results.
+ 
+   matmult <- function (A,B)
+   { n <- nrow(A)
+     m <- ncol(B)
+     k <- ncol(A)
+     stopifnot(nrow(B)==k)
+     C <- matrix(0,n,m)
+     for (i in seq_len(n))
+     { for (j in seq_len(m))
+       { C[i,j] <- sum (A[i,] * B[,j])
+       }
+     }
+     C
+   }
+ 
+   # Do checks with given matrix sizes.
+ 
+   check <- function (n, m, k)
+   { A <- matrix (rgeom(n*k,0.1)/8, n, k)
+     B <- matrix (rgeom(k*m,0.1)/8, k, m)
+     C <- matmult(A,B)
+     C1 <- matmult(A,B+1)
+     C2 <- matmult(A,B)+2
+     At <- t(A)
+     Bt <- t(B)
+     stopifnot(identical(A%*%B,C))
+     stopifnot(identical(crossprod(At,B),C))
+     stopifnot(identical(tcrossprod(A,Bt),C))
+     stopifnot(identical(A%*%(B+1),C1))
+     stopifnot(identical(crossprod(At,B+1),C1))
+     stopifnot(identical(tcrossprod(A,Bt+1),C1))
+     stopifnot(identical(A%*%B+2,C2))
+     stopifnot(identical(crossprod(At,B)+2,C2))
+     stopifnot(identical(tcrossprod(A,Bt)+2,C2))
+     if (n==m) 
+     { D <- matmult(At,A)
+       stopifnot(identical(crossprod(A),D))
+       stopifnot(identical(tcrossprod(At),D))
+     }
+     C
+   }
+ 
+   # Set seed to get consistent results.
+ 
+   set.seed(1)
+ 
+   # Try various sizes systematically.
+ 
+   for (n in 0..11)
+   { for (m in 0..11)
+     { for (k in 0..11)
+       { C <- check(n,m,k)
+       }
+     }
+   }
+ 
+   if (print)
+   { cat("\n")
+     print(C)
+   }
+ 
+   for (n in c(20,100,200,1000,2000,10000))
+   { for (m in c(20,100,200,1000,2000,10000))
+     { if (n*m <= 2000000)
+       { if (print) print(c(n,m))
+         for (k in c(1,2,3,4,5,8,9)) check(n,m,k)
+       }
+     }
+   }
+ 
+   # Try various sizes randomly.  Can increase loop count for more testing
+   # by setting the environment variable R_MATPROD_TEST_COUNT (minimum 200).
+ 
+   count <- as.integer(Sys.getenv("R_MATPROD_TEST_COUNT"))
+   if (is.na(count) || count < 200) count <- 200
+ 
+   for (i in 1..count)
+   {  n <- if (runif(1)<0.6) 15*rpois(1,10) + rpois(1,10) 
+           else if (runif(1)>0.93) 50*rpois(1,12) + rpois(1,30) 
+           else rpois(1,5)
+      m <- if (runif(1)<0.6) 15*rpois(1,10) + rpois(1,10) 
+           else if (runif(1)>0.93) 50*rpois(1,12) + rpois(1,30) 
+           else rpois(1,5)
+      k <- if (runif(1)<0.6) 15*rpois(1,10) + rpois(1,10) 
+           else if (runif(1)>0.93) 50*rpois(1,12) + rpois(1,30) 
+           else rpois(1,5)
+      if (n > 1200) n <- 1200
+      if (m > 1200) m <- 1200
+      if (k > 1200) k <- 1200
+      # Print n,m,k, but only for the first 200, so increasing the loop
+      # repetitions won't invalidate saved output.
+      if (print && i <= 200) print(c(n,m,k))
+      check(n,m,k)
+   }
+ }
> 
> # Check matrix products using BLAS and using 'matprod' routines, with
> # or without helper threads enabled.
> 
> sv <- options()[c("mat_mult_with_BLAS","helpers_disable")]
> 
> options(mat_mult_with_BLAS=FALSE,helpers_disable=FALSE)
> check_matprod()

$mat_mult_with_BLAS
[1] FALSE FALSE FALSE FALSE

$helpers_disable
[1] FALSE


          [,1]      [,2]     [,3]      [,4]     [,5]      [,6]      [,7]
 [1,] 6.859375  8.890625 15.98438 15.484375  9.78125  6.781250  7.781250
 [2,] 3.500000  7.921875 12.25000 13.421875  9.21875  8.406250 10.265625
 [3,] 3.375000 10.328125 49.25000 21.859375 40.85938 14.953125 21.718750
 [4,] 1.000000 10.687500 31.53125 22.625000 20.98438 12.281250 23.859375
 [5,] 4.875000 10.265625 34.32812 25.171875 36.50000 13.968750 12.015625
 [6,] 1.593750  8.656250 16.65625 18.484375 16.64062  9.406250 24.296875
 [7,] 2.406250  4.109375 14.06250  6.312500 11.81250  4.703125  6.203125
 [8,] 2.171875  7.468750 14.48438 23.593750 16.35938  8.046875 10.609375
 [9,] 3.906250  7.281250 26.96875 20.218750 27.60938  9.281250 12.671875
[10,] 2.750000  7.781250 19.46875  7.390625 22.39062 11.812500  7.453125
[11,] 2.437500  7.281250 21.40625 18.312500 29.15625  8.140625  9.796875
           [,8]      [,9]     [,10]     [,11]
 [1,] 11.796875 10.281250 13.546875  5.140625
 [2,]  6.203125 10.937500 11.578125  5.609375
 [3,]  4.484375 25.421875 15.984375 21.546875
 [4,]  8.546875 22.468750 15.359375 18.234375
 [5,]  5.703125 30.281250 24.937500 18.296875
 [6,]  7.000000 13.937500 11.218750 11.015625
 [7,]  3.500000  8.828125  4.421875  6.093750
 [8,]  2.859375 18.437500 35.046875  7.718750
 [9,]  7.984375 17.375000 15.796875 15.984375
[10,]  2.968750 15.406250  5.000000 11.921875
[11,] 16.500000 19.500000  8.953125 22.812500
[1] 20 20
[1]  20 100
[1]  20 200
[1]   20 1000
[1]   20 2000
[1]    20 10000
[1] 100  20
[1] 100 100
[1] 100 200
[1]  100 1000
[1]  100 2000
[1]   100 10000
[1] 200  20
[1] 200 100
[1] 200 200
[1]  200 1000
[1]  200 2000
[1]   200 10000
[1] 1000   20
[1] 1000  100
[1] 1000  200
[1] 1000 1000
[1] 1000 2000
[1] 2000   20
[1] 2000  100
[1] 2000  200
[1] 2000 1000
[1] 10000    20
[1] 10000   100
[1] 10000   200
[1] 878 162 142
[1] 220 203   5
[1] 129 129 132
[1] 221 216 173
[1]  69 112 149
[1] 191 183 113
[1] 145 100 176
[1] 143   3  12
[1] 4 8 7
[1] 131 148 216
[1] 151 294   6
[1]   5   3 231
[1] 130 162   6
[1]   8 175   4
[1] 143 160 162
[1] 633 125 114
[1] 11  7  4
[1]   6   2 136
[1] 168   3   6
[1] 140   4 129
[1]   2 325 208
[1]  3 95  4
[1]   7 131 116
[1]   3 159 104
[1] 176  84 114
[1]   3   8 174
[1] 213 146   5
[1] 5 4 5
[1] 177 185  84
[1] 201   4 143
[1]   3 130 112
[1] 143   3 148
[1] 777 175   4
[1] 189  82 119
[1] 172   5 189
[1]   7 210   9
[1] 5 7 3
[1] 172 179   5
[1]   8 111 110
[1] 192 166 172
[1]  96 216  82
[1]   5 729   6
[1] 111 172   6
[1] 130   2 192
[1]   5 189 164
[1]   9 207   9
[1] 151   7   3
[1]  9  1 97
[1] 125  99 103
[1] 233   5 142
[1]   4 232 193
[1] 234 632 157
[1] 171 172 132
[1] 467   7 158
[1]   6   3 169
[1] 113 158   4
[1]   2   5 144
[1] 254 172 143
[1] 231  78   3
[1] 133 126  87
[1] 217 155   2
[1]   7   6 281
[1] 218   5 144
[1]   4 768 132
[1] 192   8 251
[1]   3   3 230
[1]   5 176 101
[1]  88 160 118
[1] 160 130 203
[1] 3 4 2
[1] 158 191 111
[1]   4 173 204
[1] 115 204   4
[1] 267   5 110
[1] 114 116  98
[1]  70 102   7
[1] 176   6 112
[1] 142   4 209
[1] 235 197 206
[1]   1 160   4
[1] 192   5 521
[1]   4 102 191
[1]   6 161 171
[1] 130 200 120
[1] 204 190 540
[1] 101  11   6
[1] 6 8 4
[1]   6 206   3
[1] 128   4 130
[1] 129 127 535
[1]   7 161   4
[1]  99   6 250
[1]   5 126 132
[1]   4 247   5
[1] 247 172 177
[1]   9 162 148
[1]   4 136 207
[1] 680 127 114
[1] 158  39 262
[1]   4 223 142
[1]   9 233 145
[1] 141   6 160
[1] 114 189 161
[1]   4   6 116
[1]  83  10 202
[1]  84 176 162
[1]  84 160 159
[1] 143 131 206
[1]   4 202 128
[1]   5 175 222
[1]   5 155 201
[1] 92  2  4
[1] 247   2 158
[1] 632 145 206
[1]   2 143 158
[1] 152 104   3
[1] 626   5 129
[1] 171 193 241
[1] 149 104   2
[1] 7 3 4
[1] 144  57 131
[1] 142 126 175
[1] 159   4 191
[1] 145 179 163
[1] 192   6 133
[1]   8   4 187
[1] 157 207 777
[1] 127   6   4
[1] 126 151  83
[1] 175   4   2
[1] 159 112   8
[1]   4 112   4
[1]   5 114 246
[1] 147 172 190
[1] 159 118 112
[1]   5   8 190
[1] 178 172   4
[1] 164   1   7
[1] 141 187 192
[1] 150   4 102
[1]   2 185  11
[1] 171   3 235
[1]   1 161 135
[1] 179  82 117
[1]   5   6 574
[1]   7   9 128
[1]  97 176   3
[1]   3 195 164
[1]   7   1 157
[1] 114   6 138
[1] 176   3   4
[1] 195 101 175
[1] 146 138 190
[1]   8   2 138
[1] 147   8   3
[1]   7 117   5
[1]   9 138   4
[1] 192   7   7
[1] 194 176 164
[1] 218 232  69
[1] 101   5   7
[1]   3 114   4
[1] 168   8 142
[1] 221   5 210
[1] 112 130 222
[1] 114   4   4
[1] 128   2 162
[1] 175  97 141
[1] 112   5 130
[1]   6 127   8
[1] 144   5 182
[1]  3 98  6
[1]   5 281   7
[1] 160   5   5
[1] 176   6   9
[1] 221 234 157
[1] 174   9  82
[1] 160   2   5
[1] 142 210 232
[1]   5 127   5
[1] 130   6 582
[1] 4 5 3
[1] 115 169 222
[1]  7 82  5
[1] 165   2 203
[1] 251   4 429
[1] 149 235 131
[1]   2   6 277
[1] 580 163 112
[1]  73 173 205
[1] 188   7 186
[1]   5 136   3
[1]   9 148  66
[1] 125 156 115
[1] 175 166   3
[1] 131   2 159
[1]   4 209   5
[1] 101   5 256
[1]  97 205 177
[1] 242   5 178
> 
> options(mat_mult_with_BLAS=FALSE,helpers_disable=TRUE)
> check_matprod()

$mat_mult_with_BLAS
[1] FALSE FALSE FALSE FALSE

$helpers_disable
[1] TRUE


          [,1]      [,2]     [,3]      [,4]     [,5]      [,6]      [,7]
 [1,] 6.859375  8.890625 15.98438 15.484375  9.78125  6.781250  7.781250
 [2,] 3.500000  7.921875 12.25000 13.421875  9.21875  8.406250 10.265625
 [3,] 3.375000 10.328125 49.25000 21.859375 40.85938 14.953125 21.718750
 [4,] 1.000000 10.687500 31.53125 22.625000 20.98438 12.281250 23.859375
 [5,] 4.875000 10.265625 34.32812 25.171875 36.50000 13.968750 12.015625
 [6,] 1.593750  8.656250 16.65625 18.484375 16.64062  9.406250 24.296875
 [7,] 2.406250  4.109375 14.06250  6.312500 11.81250  4.703125  6.203125
 [8,] 2.171875  7.468750 14.48438 23.593750 16.35938  8.046875 10.609375
 [9,] 3.906250  7.281250 26.96875 20.218750 27.60938  9.281250 12.671875
[10,] 2.750000  7.781250 19.46875  7.390625 22.39062 11.812500  7.453125
[11,] 2.437500  7.281250 21.40625 18.312500 29.15625  8.140625  9.796875
           [,8]      [,9]     [,10]     [,11]
 [1,] 11.796875 10.281250 13.546875  5.140625
 [2,]  6.203125 10.937500 11.578125  5.609375
 [3,]  4.484375 25.421875 15.984375 21.546875
 [4,]  8.546875 22.468750 15.359375 18.234375
 [5,]  5.703125 30.281250 24.937500 18.296875
 [6,]  7.000000 13.937500 11.218750 11.015625
 [7,]  3.500000  8.828125  4.421875  6.093750
 [8,]  2.859375 18.437500 35.046875  7.718750
 [9,]  7.984375 17.375000 15.796875 15.984375
[10,]  2.968750 15.406250  5.000000 11.921875
[11,] 16.500000 19.500000  8.953125 22.812500
[1] 20 20
[1]  20 100
[1]  20 200
[1]   20 1000
[1]   20 2000
[1]    20 10000
[1] 100  20
[1] 100 100
[1] 100 200
[1]  100 1000
[1]  100 2000
[1]   100 10000
[1] 200  20
[1] 200 100
[1] 200 200
[1]  200 1000
[1]  200 2000
[1]   200 10000
[1] 1000   20
[1] 1000  100
[1] 1000  200
[1] 1000 1000
[1] 1000 2000
[1] 2000   20
[1] 2000  100
[1] 2000  200
[1] 2000 1000
[1] 10000    20
[1] 10000   100
[1] 10000   200
[1] 878 162 142
[1] 220 203   5
[1] 129 129 132
[1] 221 216 173
[1]  69 112 149
[1] 191 183 113
[1] 145 100 176
[1] 143   3  12
[1] 4 8 7
[1] 131 148 216
[1] 151 294   6
[1]   5   3 231
[1] 130 162   6
[1]   8 175   4
[1] 143 160 162
[1] 633 125 114
[1] 11  7  4
[1]   6   2 136
[1] 168   3   6
[1] 140   4 129
[1]   2 325 208
[1]  3 95  4
[1]   7 131 116
[1]   3 159 104
[1] 176  84 114
[1]   3   8 174
[1] 213 146   5
[1] 5 4 5
[1] 177 185  84
[1] 201   4 143
[1]   3 130 112
[1] 143   3 148
[1] 777 175   4
[1] 189  82 119
[1] 172   5 189
[1]   7 210   9
[1] 5 7 3
[1] 172 179   5
[1]   8 111 110
[1] 192 166 172
[1]  96 216  82
[1]   5 729   6
[1] 111 172   6
[1] 130   2 192
[1]   5 189 164
[1]   9 207   9
[1] 151   7   3
[1]  9  1 97
[1] 125  99 103
[1] 233   5 142
[1]   4 232 193
[1] 234 632 157
[1] 171 172 132
[1] 467   7 158
[1]   6   3 169
[1] 113 158   4
[1]   2   5 144
[1] 254 172 143
[1] 231  78   3
[1] 133 126  87
[1] 217 155   2
[1]   7   6 281
[1] 218   5 144
[1]   4 768 132
[1] 192   8 251
[1]   3   3 230
[1]   5 176 101
[1]  88 160 118
[1] 160 130 203
[1] 3 4 2
[1] 158 191 111
[1]   4 173 204
[1] 115 204   4
[1] 267   5 110
[1] 114 116  98
[1]  70 102   7
[1] 176   6 112
[1] 142   4 209
[1] 235 197 206
[1]   1 160   4
[1] 192   5 521
[1]   4 102 191
[1]   6 161 171
[1] 130 200 120
[1] 204 190 540
[1] 101  11   6
[1] 6 8 4
[1]   6 206   3
[1] 128   4 130
[1] 129 127 535
[1]   7 161   4
[1]  99   6 250
[1]   5 126 132
[1]   4 247   5
[1] 247 172 177
[1]   9 162 148
[1]   4 136 207
[1] 680 127 114
[1] 158  39 262
[1]   4 223 142
[1]   9 233 145
[1] 141   6 160
[1] 114 189 161
[1]   4   6 116
[1]  83  10 202
[1]  84 176 162
[1]  84 160 159
[1] 143 131 206
[1]   4 202 128
[1]   5 175 222
[1]   5 155 201
[1] 92  2  4
[1] 247   2 158
[1] 632 145 206
[1]   2 143 158
[1] 152 104   3
[1] 626   5 129
[1] 171 193 241
[1] 149 104   2
[1] 7 3 4
[1] 144  57 131
[1] 142 126 175
[1] 159   4 191
[1] 145 179 163
[1] 192   6 133
[1]   8   4 187
[1] 157 207 777
[1] 127   6   4
[1] 126 151  83
[1] 175   4   2
[1] 159 112   8
[1]   4 112   4
[1]   5 114 246
[1] 147 172 190
[1] 159 118 112
[1]   5   8 190
[1] 178 172   4
[1] 164   1   7
[1] 141 187 192
[1] 150   4 102
[1]   2 185  11
[1] 171   3 235
[1]   1 161 135
[1] 179  82 117
[1]   5   6 574
[1]   7   9 128
[1]  97 176   3
[1]   3 195 164
[1]   7   1 157
[1] 114   6 138
[1] 176   3   4
[1] 195 101 175
[1] 146 138 190
[1]   8   2 138
[1] 147   8   3
[1]   7 117   5
[1]   9 138   4
[1] 192   7   7
[1] 194 176 164
[1] 218 232  69
[1] 101   5   7
[1]   3 114   4
[1] 168   8 142
[1] 221   5 210
[1] 112 130 222
[1] 114   4   4
[1] 128   2 162
[1] 175  97 141
[1] 112   5 130
[1]   6 127   8
[1] 144   5 182
[1]  3 98  6
[1]   5 281   7
[1] 160   5   5
[1] 176   6   9
[1] 221 234 157
[1] 174   9  82
[1] 160   2   5
[1] 142 210 232
[1]   5 127   5
[1] 130   6 582
[1] 4 5 3
[1] 115 169 222
[1]  7 82  5
[1] 165   2 203
[1] 251   4 429
[1] 149 235 131
[1]   2   6 277
[1] 580 163 112
[1]  73 173 205
[1] 188   7 186
[1]   5 136   3
[1]   9 148  66
[1] 125 156 115
[1] 175 166   3
[1] 131   2 159
[1]   4 209   5
[1] 101   5 256
[1]  97 205 177
[1] 242   5 178
> 
> if (identical(Sys.getenv("R_MATPROD_TEST_BLAS"),"TRUE")) {
+ 
+     options(mat_mult_with_BLAS=TRUE,helpers_disable=FALSE)
+     check_matprod(print=FALSE)
+ 
+     options(mat_mult_with_BLAS=TRUE,helpers_disable=TRUE)
+     check_matprod(print=FALSE)
+ }
> 
> options(sv)
> 
