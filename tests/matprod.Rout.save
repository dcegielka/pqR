
pqR version 2.15.1 (2019-00-00), based on R 2.15.0 (2012-03-30)

R 2.15.0 is Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

Modifications to R in pqR are Copyright (C) 2013-2019 Radford M. Neal

Some modules are from R-2.15.1 or later versions distributed by the R Core Team

Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.


3 helper threads, task merging enabled, uncompressed pointers.

> # Test matrix multiplication, with %*%, crossprod, and tcrossprod, by
> # BLAS and 'matprod' routines.
> #
> # Added for pqR, 2013, 2018, 2019 Radford M. Neal.
> 
> 
> # Matrix multiply the hard way, to check results.  Avoids use of 'sum' or
> # 'colSums', which may use extended precision.
> 
> matmult <- function (A,B)
+ { n <- nrow(A)
+   m <- ncol(B)
+   k <- ncol(A)
+   stopifnot(nrow(B)==k)
+   C <- matrix(0,n,m)
+   for (i in seq_len(n))
+   { T <- A[i,]*B
+     S <- 0
+     for (j in seq_len(k)) S <- S + T[j,]
+     C[i,] <- S
+   }
+   C
+ }
> 
> 
> # Check matrix multiplication with various sizes of matrices, setting
> # matrix elements to random values that are integer multiples of 1/8 so
> # that floating point arithmetic will be exact (but accidental conversions
> # to integer will be detected), unless addrand is TRUE, in which case 
> # random normals (mean 0.1, sd sqrt(2)) are added to these.  The crossprod 
> # and tcrossprod routines are also checked when given one argument (producing
> # a symmetric result).  Returns the last (largest) result matrix.
> 
> check_matprod <- function (print=TRUE, addrand=FALSE)
+ { 
+   if (print) 
+   { cat("\n")
+     print(options()[c("mat_mult_with_BLAS","helpers_disable")])
+   }
+ 
+   # Do checks with given matrix sizes.
+ 
+   check <- function (n, m, k)
+   { A <- matrix (rgeom(n*k,0.1)/8, n, k)
+     if (addrand) A <- A + matrix (rnorm(n*k,0.1,sqrt(2)), n, k)
+     B <- matrix (rgeom(k*m,0.1)/8, k, m)
+     if (addrand) B <- B + matrix (rnorm(k*m,0.1,sqrt(2)), k, m)
+     C <- matmult(A,B)
+     C1 <- matmult(A,B+1)
+     C2 <- matmult(A,B)+2
+     At <- t(A)
+     Bt <- t(B)
+     stopifnot(identical(A%*%B,C))
+     stopifnot(identical(crossprod(At,B),C))
+     stopifnot(identical(tcrossprod(A,Bt),C))
+     stopifnot(identical(A%*%(B+1),C1))
+     stopifnot(identical(crossprod(At,B+1),C1))
+     stopifnot(identical(tcrossprod(A,Bt+1),C1))
+     stopifnot(identical(A%*%B+2,C2))
+     stopifnot(identical(crossprod(At,B)+2,C2))
+     stopifnot(identical(tcrossprod(A,Bt)+2,C2))
+     if (n==m) 
+     { D <- matmult(At,A)
+       stopifnot(identical(crossprod(A),D))
+       stopifnot(identical(tcrossprod(At),D))
+     }
+     C
+   }
+ 
+   # Set seed to get consistent results.
+ 
+   set.seed(1)
+ 
+   # Try various sizes systematically.
+ 
+   cat("---- (0..11) (0..11) (0..11)\n")
+ 
+   for (n in 0..11)
+   { for (m in 0..11)
+     { for (k in 0..11)
+       { C <- check(n,m,k)
+       }
+     }
+   }
+ 
+   if (print)
+   { cat("\n")
+     print(round(C,5))  # round so result not sensitive to accuracy of printing
+   }
+ 
+   cat("---- n (1 2 3 4 5) m\n")
+ 
+   for (n in c(2,3,4,5,8,100,1000,2000,4000))
+   { for (m in c(2,3,4,5,8,100,1000,2000,4000))
+     { if (n*m <= 1000000)
+       { if (print) print(c(n,m))
+         for (k in c(1,2,3,4,5)) check(n,m,k)
+       }
+     }
+   }
+ 
+   cat("---- (1 2 3 4 5) k m\n")
+ 
+   for (k in c(2,3,4,5,8,100,1000,2000))
+   { for (m in c(2,3,4,5,8,100,1000,2000))
+     { if (k*m <= 1000000)
+       { if (print) print(c(k,m))
+         for (n in c(1,2,3,4,5)) check(n,m,k)
+       }
+     }
+   }
+ 
+   cat("---- random\n")
+ 
+   # Try various sizes randomly.  Can increase loop count for more testing
+   # by setting the environment variable R_MATPROD_TEST_COUNT (minimum 200).
+ 
+   count <- as.integer(Sys.getenv("R_MATPROD_TEST_COUNT"))
+   if (is.na(count) || count < 200) count <- 200
+ 
+   for (i in 1..count)
+   {  n <- if (runif(1)<0.6) 15*rpois(1,10) + rpois(1,10) 
+           else if (runif(1)>0.93) 50*rpois(1,12) + rpois(1,30) 
+           else rpois(1,5)
+      m <- if (runif(1)<0.6) 15*rpois(1,10) + rpois(1,10) 
+           else if (runif(1)>0.93) 50*rpois(1,12) + rpois(1,30) 
+           else rpois(1,5)
+      k <- if (runif(1)<0.6) 15*rpois(1,10) + rpois(1,10) 
+           else if (runif(1)>0.93) 50*rpois(1,12) + rpois(1,30) 
+           else rpois(1,5)
+      if (n > 1200) n <- 1200
+      if (m > 1200) m <- 1200
+      if (k > 1200) k <- 1200
+      # Print n,m,k, but only for the first 200, so increasing the loop
+      # repetitions won't invalidate saved output.
+      if (print && i <= 200) print(c(n,m,k))
+      check(n,m,k)
+   }
+ }
> 
> 
> # Check matrix products using BLAS and using 'matprod' routines, with
> # or without helper threads enabled.
> 
> sv <- options()[c("mat_mult_with_BLAS","helpers_disable")]
> 
> if (FALSE) { # Don't do exact arithmetic tests for matprod, to save time. They
+              # are unlikely to reveal a bug that tests with rounding wouldn't.
+ 
+   options(mat_mult_with_BLAS=FALSE,helpers_disable=FALSE)
+   cat("\nNot BLAS, Helpers not disabled, arithmetic should be exact\n\n")
+   check_matprod()
+ 
+   options(mat_mult_with_BLAS=FALSE,helpers_disable=TRUE)
+   cat("\nNot BLAS, Helpers disabled, arithmetic should be exact\n\n")
+   check_matprod()
+ }
> 
> options(mat_mult_with_BLAS=FALSE,helpers_disable=FALSE)
> cat("\nNot BLAS, Helpers not disabled, arithmetic will have rounding\n\n")

Not BLAS, Helpers not disabled, arithmetic will have rounding

> check_matprod(addrand=TRUE)

$mat_mult_with_BLAS
[1] FALSE FALSE FALSE FALSE

$helpers_disable
[1] FALSE

---- (0..11) (0..11) (0..11)

          [,1]     [,2]      [,3]     [,4]     [,5]     [,6]      [,7]     [,8]
 [1,] 28.99794 18.13545  25.58786 32.55158 22.77893  7.86235  56.24750 36.55758
 [2,] 15.63552  9.12539  24.58815 17.70320 27.35275  4.09453  42.50212  8.73189
 [3,] 10.09259 13.00496   7.23873 20.71411 14.47981  7.17432  29.46696 21.71735
 [4,]  5.45704 12.09676 -14.82628  2.73464 18.93645 -4.20013   8.21915  4.72123
 [5,] 13.59511 -9.43081   5.12870 -5.30703 -4.68350 -7.76798 -16.23574 -5.09917
 [6,] 21.95188 16.42258  22.08705 26.82354  3.16873 15.54199  19.91394 36.65191
 [7,] 27.34954 10.27864  21.57771 25.09064 13.40314 -2.98485  21.51597 23.21312
 [8,] 18.40832 13.59315  -2.93193  4.42134 14.77208  6.86498  20.28990 13.41688
 [9,] 34.84810  7.96293  16.78904 32.15739 28.20619 -8.74886  42.01347 20.52595
[10,] 38.75468 21.52709  15.28542 17.21231  4.37252  4.36894   7.36003 37.12144
[11,] 35.93722 23.53956  14.42260 22.09372 19.58593  5.12526  48.93120 22.52320
          [,9]     [,10]     [,11]
 [1,] 19.85940  57.01201  23.24163
 [2,] 18.23807  38.75213  40.65458
 [3,] 15.09076  33.76508   2.69090
 [4,] 16.07274  18.20737 -22.65278
 [5,]  0.14330 -22.04481   5.72077
 [6,] 15.62450  48.48395  20.21888
 [7,] 16.51430  31.40702  26.41611
 [8,] 23.59424  27.42344 -11.36841
 [9,] 22.03115  15.13140  16.17352
[10,] 18.51719  49.42296  14.05537
[11,] 31.73945  54.16492  18.36399
---- n (1 2 3 4 5) m
[1] 2 2
[1] 2 3
[1] 2 4
[1] 2 5
[1] 2 8
[1]   2 100
[1]    2 1000
[1]    2 2000
[1]    2 4000
[1] 3 2
[1] 3 3
[1] 3 4
[1] 3 5
[1] 3 8
[1]   3 100
[1]    3 1000
[1]    3 2000
[1]    3 4000
[1] 4 2
[1] 4 3
[1] 4 4
[1] 4 5
[1] 4 8
[1]   4 100
[1]    4 1000
[1]    4 2000
[1]    4 4000
[1] 5 2
[1] 5 3
[1] 5 4
[1] 5 5
[1] 5 8
[1]   5 100
[1]    5 1000
[1]    5 2000
[1]    5 4000
[1] 8 2
[1] 8 3
[1] 8 4
[1] 8 5
[1] 8 8
[1]   8 100
[1]    8 1000
[1]    8 2000
[1]    8 4000
[1] 100   2
[1] 100   3
[1] 100   4
[1] 100   5
[1] 100   8
[1] 100 100
[1]  100 1000
[1]  100 2000
[1]  100 4000
[1] 1000    2
[1] 1000    3
[1] 1000    4
[1] 1000    5
[1] 1000    8
[1] 1000  100
[1] 1000 1000
[1] 2000    2
[1] 2000    3
[1] 2000    4
[1] 2000    5
[1] 2000    8
[1] 2000  100
[1] 4000    2
[1] 4000    3
[1] 4000    4
[1] 4000    5
[1] 4000    8
[1] 4000  100
---- (1 2 3 4 5) k m
[1] 2 2
[1] 2 3
[1] 2 4
[1] 2 5
[1] 2 8
[1]   2 100
[1]    2 1000
[1]    2 2000
[1] 3 2
[1] 3 3
[1] 3 4
[1] 3 5
[1] 3 8
[1]   3 100
[1]    3 1000
[1]    3 2000
[1] 4 2
[1] 4 3
[1] 4 4
[1] 4 5
[1] 4 8
[1]   4 100
[1]    4 1000
[1]    4 2000
[1] 5 2
[1] 5 3
[1] 5 4
[1] 5 5
[1] 5 8
[1]   5 100
[1]    5 1000
[1]    5 2000
[1] 8 2
[1] 8 3
[1] 8 4
[1] 8 5
[1] 8 8
[1]   8 100
[1]    8 1000
[1]    8 2000
[1] 100   2
[1] 100   3
[1] 100   4
[1] 100   5
[1] 100   8
[1] 100 100
[1]  100 1000
[1]  100 2000
[1] 1000    2
[1] 1000    3
[1] 1000    4
[1] 1000    5
[1] 1000    8
[1] 1000  100
[1] 1000 1000
[1] 2000    2
[1] 2000    3
[1] 2000    4
[1] 2000    5
[1] 2000    8
[1] 2000  100
---- random
[1]  95 205 175
[1] 177 634 175
[1] 194   4 171
[1] 178 129   4
[1]   7 265 136
[1] 145 176   3
[1] 172   6   4
[1] 4 4 5
[1] 202 191   6
[1] 163   4 129
[1]  98 161   8
[1] 211   4   6
[1]   5   4 129
[1]   3  72 177
[1] 204 104   1
[1]   8 243   3
[1]   7 824   4
[1] 163 190 100
[1] 159   6   4
[1]   3 112 177
[1] 200 203  12
[1] 155   2   4
[1] 111 143 124
[1] 327   3   4
[1]   3 157 160
[1] 121   4 156
[1] 205   6   8
[1]   4 179   5
[1]   7 144 159
[1]   4 192   7
[1] 165 130 162
[1]  4  7 94
[1] 229 221 175
[1] 142   4 147
[1]   5  64 132
[1]   2 120 190
[1]   5 201   2
[1]   6 216 133
[1] 145 217 241
[1]   7 202   7
[1] 177 111   6
[1]   7   4 270
[1]   4 100 163
[1] 214   3  87
[1] 112 189 130
[1] 179 206   6
[1]   6 156 175
[1] 3 3 3
[1] 125   3   6
[1] 111 147 212
[1] 176 172   5
[1]   5   5 178
[1] 162 133 113
[1]  74 130 189
[1]   6 162 883
[1] 253 158 209
[1] 126 146  88
[1] 176 128 160
[1]   5 247   9
[1] 114 121  58
[1] 58  2  2
[1] 140   2 166
[1] 171 192   4
[1] 172   4 117
[1]  97   2 176
[1] 250   6 126
[1] 131   5   6
[1] 233  74 189
[1] 127   5 228
[1]   3 154 139
[1]   4 182   2
[1] 179   5 127
[1]   5   6 158
[1]  40 160 124
[1]   7   4 113
[1] 208 145 191
[1] 174 207 175
[1] 157 219 236
[1] 133 206   7
[1]  83 119   5
[1] 134  83 271
[1]  10   3 238
[1]  97 157   9
[1]   5 218 218
[1]   6 149   6
[1]   4   6 157
[1]   4 173   2
[1] 189   5 148
[1]   3 157   7
[1] 5 6 6
[1] 102 160   5
[1] 143 114 141
[1] 207 337   7
[1] 191   2 143
[1] 267   8   6
[1] 205   3 127
[1]   5 195   4
[1]   3 220 109
[1] 161 221 129
[1] 252   5 173
[1]  2 96 91
[1]  11   5 203
[1]   5 139 245
[1]   4 174 186
[1]   2 146 179
[1] 205 158 253
[1] 217   5 148
[1]   8   6 204
[1]   9 164  98
[1]   6 218 172
[1]   2 147 133
[1] 171   4 130
[1] 160 165  97
[1] 176   3 267
[1]   5 163   5
[1]   7 236 279
[1] 270   5  82
[1]   5 249   2
[1] 173 244   5
[1]   5   7 144
[1]  96 171 224
[1]   1   8 158
[1] 114 159 116
[1]   4 176 125
[1]   5   8 106
[1]   3 531  89
[1] 144   8   5
[1] 177 164 203
[1]   5   4 151
[1] 132 160   7
[1] 157   1 149
[1]  2 99 72
[1] 5 5 1
[1] 116   4 135
[1] 134 189 187
[1]   5 101   7
[1]   6   1 141
[1] 129  99 138
[1]  3  3 87
[1] 142 250  11
[1] 157 112 191
[1]   8 164 250
[1]   2   3 157
[1]   3 116   5
[1]   5 189 157
[1] 132 194 252
[1] 127 187 177
[1] 4 6 4
[1] 113 173 129
[1] 131   9 160
[1] 101 112   6
[1]   3 429 239
[1] 181 101 148
[1]   7 146 117
[1]   4 173   3
[1] 220 134 130
[1] 487 151 160
[1] 155   5  86
[1] 147 146 166
[1] 217 111   6
[1] 146  11 145
[1]   3 171   6
[1] 208  44   7
[1] 131 142  98
[1]   3 218 164
[1]   6 219   7
[1] 146 120   8
[1] 144 205 129
[1]  99   3 166
[1] 132 221 227
[1]  10 159   5
[1]  82 168   6
[1] 150 129   7
[1]   1 236 159
[1]   9 158 146
[1] 126   4   6
[1] 127 167 390
[1]  94 171   6
[1] 160 222 143
[1] 151   5 106
[1]   2  54 114
[1] 161 184 124
[1]   9 172 112
[1]   2   3 113
[1]  79   6 195
[1]   2   6 131
[1] 83  7  6
[1] 70 99 98
[1]   7 187   6
[1]  7 85  4
[1] 171 192 145
[1] 166  84 174
[1] 3 3 6
[1] 141 478   6
[1] 187 157 116
[1] 100 222 172
[1] 248   4 324
[1] 147   4   4
[1]  4  4 96
[1] 829 132 176
> 
> options(mat_mult_with_BLAS=FALSE,helpers_disable=TRUE)
> cat("\nNot BLAS, Helpers disabled, arithmetic will have rounding\n\n")

Not BLAS, Helpers disabled, arithmetic will have rounding

> check_matprod(addrand=TRUE)

$mat_mult_with_BLAS
[1] FALSE FALSE FALSE FALSE

$helpers_disable
[1] TRUE

---- (0..11) (0..11) (0..11)

          [,1]     [,2]      [,3]     [,4]     [,5]     [,6]      [,7]     [,8]
 [1,] 28.99794 18.13545  25.58786 32.55158 22.77893  7.86235  56.24750 36.55758
 [2,] 15.63552  9.12539  24.58815 17.70320 27.35275  4.09453  42.50212  8.73189
 [3,] 10.09259 13.00496   7.23873 20.71411 14.47981  7.17432  29.46696 21.71735
 [4,]  5.45704 12.09676 -14.82628  2.73464 18.93645 -4.20013   8.21915  4.72123
 [5,] 13.59511 -9.43081   5.12870 -5.30703 -4.68350 -7.76798 -16.23574 -5.09917
 [6,] 21.95188 16.42258  22.08705 26.82354  3.16873 15.54199  19.91394 36.65191
 [7,] 27.34954 10.27864  21.57771 25.09064 13.40314 -2.98485  21.51597 23.21312
 [8,] 18.40832 13.59315  -2.93193  4.42134 14.77208  6.86498  20.28990 13.41688
 [9,] 34.84810  7.96293  16.78904 32.15739 28.20619 -8.74886  42.01347 20.52595
[10,] 38.75468 21.52709  15.28542 17.21231  4.37252  4.36894   7.36003 37.12144
[11,] 35.93722 23.53956  14.42260 22.09372 19.58593  5.12526  48.93120 22.52320
          [,9]     [,10]     [,11]
 [1,] 19.85940  57.01201  23.24163
 [2,] 18.23807  38.75213  40.65458
 [3,] 15.09076  33.76508   2.69090
 [4,] 16.07274  18.20737 -22.65278
 [5,]  0.14330 -22.04481   5.72077
 [6,] 15.62450  48.48395  20.21888
 [7,] 16.51430  31.40702  26.41611
 [8,] 23.59424  27.42344 -11.36841
 [9,] 22.03115  15.13140  16.17352
[10,] 18.51719  49.42296  14.05537
[11,] 31.73945  54.16492  18.36399
---- n (1 2 3 4 5) m
[1] 2 2
[1] 2 3
[1] 2 4
[1] 2 5
[1] 2 8
[1]   2 100
[1]    2 1000
[1]    2 2000
[1]    2 4000
[1] 3 2
[1] 3 3
[1] 3 4
[1] 3 5
[1] 3 8
[1]   3 100
[1]    3 1000
[1]    3 2000
[1]    3 4000
[1] 4 2
[1] 4 3
[1] 4 4
[1] 4 5
[1] 4 8
[1]   4 100
[1]    4 1000
[1]    4 2000
[1]    4 4000
[1] 5 2
[1] 5 3
[1] 5 4
[1] 5 5
[1] 5 8
[1]   5 100
[1]    5 1000
[1]    5 2000
[1]    5 4000
[1] 8 2
[1] 8 3
[1] 8 4
[1] 8 5
[1] 8 8
[1]   8 100
[1]    8 1000
[1]    8 2000
[1]    8 4000
[1] 100   2
[1] 100   3
[1] 100   4
[1] 100   5
[1] 100   8
[1] 100 100
[1]  100 1000
[1]  100 2000
[1]  100 4000
[1] 1000    2
[1] 1000    3
[1] 1000    4
[1] 1000    5
[1] 1000    8
[1] 1000  100
[1] 1000 1000
[1] 2000    2
[1] 2000    3
[1] 2000    4
[1] 2000    5
[1] 2000    8
[1] 2000  100
[1] 4000    2
[1] 4000    3
[1] 4000    4
[1] 4000    5
[1] 4000    8
[1] 4000  100
---- (1 2 3 4 5) k m
[1] 2 2
[1] 2 3
[1] 2 4
[1] 2 5
[1] 2 8
[1]   2 100
[1]    2 1000
[1]    2 2000
[1] 3 2
[1] 3 3
[1] 3 4
[1] 3 5
[1] 3 8
[1]   3 100
[1]    3 1000
[1]    3 2000
[1] 4 2
[1] 4 3
[1] 4 4
[1] 4 5
[1] 4 8
[1]   4 100
[1]    4 1000
[1]    4 2000
[1] 5 2
[1] 5 3
[1] 5 4
[1] 5 5
[1] 5 8
[1]   5 100
[1]    5 1000
[1]    5 2000
[1] 8 2
[1] 8 3
[1] 8 4
[1] 8 5
[1] 8 8
[1]   8 100
[1]    8 1000
[1]    8 2000
[1] 100   2
[1] 100   3
[1] 100   4
[1] 100   5
[1] 100   8
[1] 100 100
[1]  100 1000
[1]  100 2000
[1] 1000    2
[1] 1000    3
[1] 1000    4
[1] 1000    5
[1] 1000    8
[1] 1000  100
[1] 1000 1000
[1] 2000    2
[1] 2000    3
[1] 2000    4
[1] 2000    5
[1] 2000    8
[1] 2000  100
---- random
[1]  95 205 175
[1] 177 634 175
[1] 194   4 171
[1] 178 129   4
[1]   7 265 136
[1] 145 176   3
[1] 172   6   4
[1] 4 4 5
[1] 202 191   6
[1] 163   4 129
[1]  98 161   8
[1] 211   4   6
[1]   5   4 129
[1]   3  72 177
[1] 204 104   1
[1]   8 243   3
[1]   7 824   4
[1] 163 190 100
[1] 159   6   4
[1]   3 112 177
[1] 200 203  12
[1] 155   2   4
[1] 111 143 124
[1] 327   3   4
[1]   3 157 160
[1] 121   4 156
[1] 205   6   8
[1]   4 179   5
[1]   7 144 159
[1]   4 192   7
[1] 165 130 162
[1]  4  7 94
[1] 229 221 175
[1] 142   4 147
[1]   5  64 132
[1]   2 120 190
[1]   5 201   2
[1]   6 216 133
[1] 145 217 241
[1]   7 202   7
[1] 177 111   6
[1]   7   4 270
[1]   4 100 163
[1] 214   3  87
[1] 112 189 130
[1] 179 206   6
[1]   6 156 175
[1] 3 3 3
[1] 125   3   6
[1] 111 147 212
[1] 176 172   5
[1]   5   5 178
[1] 162 133 113
[1]  74 130 189
[1]   6 162 883
[1] 253 158 209
[1] 126 146  88
[1] 176 128 160
[1]   5 247   9
[1] 114 121  58
[1] 58  2  2
[1] 140   2 166
[1] 171 192   4
[1] 172   4 117
[1]  97   2 176
[1] 250   6 126
[1] 131   5   6
[1] 233  74 189
[1] 127   5 228
[1]   3 154 139
[1]   4 182   2
[1] 179   5 127
[1]   5   6 158
[1]  40 160 124
[1]   7   4 113
[1] 208 145 191
[1] 174 207 175
[1] 157 219 236
[1] 133 206   7
[1]  83 119   5
[1] 134  83 271
[1]  10   3 238
[1]  97 157   9
[1]   5 218 218
[1]   6 149   6
[1]   4   6 157
[1]   4 173   2
[1] 189   5 148
[1]   3 157   7
[1] 5 6 6
[1] 102 160   5
[1] 143 114 141
[1] 207 337   7
[1] 191   2 143
[1] 267   8   6
[1] 205   3 127
[1]   5 195   4
[1]   3 220 109
[1] 161 221 129
[1] 252   5 173
[1]  2 96 91
[1]  11   5 203
[1]   5 139 245
[1]   4 174 186
[1]   2 146 179
[1] 205 158 253
[1] 217   5 148
[1]   8   6 204
[1]   9 164  98
[1]   6 218 172
[1]   2 147 133
[1] 171   4 130
[1] 160 165  97
[1] 176   3 267
[1]   5 163   5
[1]   7 236 279
[1] 270   5  82
[1]   5 249   2
[1] 173 244   5
[1]   5   7 144
[1]  96 171 224
[1]   1   8 158
[1] 114 159 116
[1]   4 176 125
[1]   5   8 106
[1]   3 531  89
[1] 144   8   5
[1] 177 164 203
[1]   5   4 151
[1] 132 160   7
[1] 157   1 149
[1]  2 99 72
[1] 5 5 1
[1] 116   4 135
[1] 134 189 187
[1]   5 101   7
[1]   6   1 141
[1] 129  99 138
[1]  3  3 87
[1] 142 250  11
[1] 157 112 191
[1]   8 164 250
[1]   2   3 157
[1]   3 116   5
[1]   5 189 157
[1] 132 194 252
[1] 127 187 177
[1] 4 6 4
[1] 113 173 129
[1] 131   9 160
[1] 101 112   6
[1]   3 429 239
[1] 181 101 148
[1]   7 146 117
[1]   4 173   3
[1] 220 134 130
[1] 487 151 160
[1] 155   5  86
[1] 147 146 166
[1] 217 111   6
[1] 146  11 145
[1]   3 171   6
[1] 208  44   7
[1] 131 142  98
[1]   3 218 164
[1]   6 219   7
[1] 146 120   8
[1] 144 205 129
[1]  99   3 166
[1] 132 221 227
[1]  10 159   5
[1]  82 168   6
[1] 150 129   7
[1]   1 236 159
[1]   9 158 146
[1] 126   4   6
[1] 127 167 390
[1]  94 171   6
[1] 160 222 143
[1] 151   5 106
[1]   2  54 114
[1] 161 184 124
[1]   9 172 112
[1]   2   3 113
[1]  79   6 195
[1]   2   6 131
[1] 83  7  6
[1] 70 99 98
[1]   7 187   6
[1]  7 85  4
[1] 171 192 145
[1] 166  84 174
[1] 3 3 6
[1] 141 478   6
[1] 187 157 116
[1] 100 222 172
[1] 248   4 324
[1] 147   4   4
[1]  4  4 96
[1] 829 132 176
> 
> if (identical(Sys.getenv("R_MATPROD_TEST_BLAS"),"TRUE")) {
+ 
+     cat("\nBLAS, Helpers not disabled, arithmetic should be exact\n\n")
+     options(mat_mult_with_BLAS=TRUE,helpers_disable=FALSE)
+     check_matprod(print=FALSE)
+ 
+     cat("\nBLAS, Helpers disabled, arithmetic should be exact\n\n")
+     options(mat_mult_with_BLAS=TRUE,helpers_disable=TRUE)
+     check_matprod(print=FALSE)
+ }
> 
> options(sv)
> 
