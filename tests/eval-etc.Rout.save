
pqR version 2.15.0 (2015-00-00), based on R 2.15.0 (2012-03-30)

R 2.15.0 is Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

Modifications to R in pqR are Copyright (C) 2013-2015 Radford M. Neal

Some modules are from R-2.15.1 or later versions distributed by the R Core Team

Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.


No helper threads, task merging enabled.

> ####  eval / parse / deparse / substitute  etc
> 
> ##- From: Peter Dalgaard BSA <p.dalgaard@biostat.ku.dk>
> ##- Subject: Re: source() / eval() bug ??? (PR#96)
> ##- Date: 20 Jan 1999 14:56:24 +0100
> e1 <- parse(text='c(F=(f <- .3), "Tail area" = 2 * if(f < 1) 30 else 90)')[[1]]
> e1
c(F = (f <- 0.3), `Tail area` = 2 * if (f < 1) 30 else 90)
> str(eval(e1))
 Named num [1:2] 0.3 60
 - attr(*, "names")= chr [1:2] "F" "Tail area"
> mode(e1)
[1] "call"
> 
> ( e2 <- quote(c(a=1,b=2)) )
c(a = 1, b = 2)
> names(e2)[2] <- "a b c"
> e2
c(`a b c` = 1, b = 2)
> parse(text=deparse(e2))
expression(c(`a b c` = 1, b = 2))
> 
> ##- From: Peter Dalgaard BSA <p.dalgaard@biostat.ku.dk>
> ##- Date: 22 Jan 1999 11:47
> 
> ( e3 <- quote(c(F=1,"tail area"=pf(1,1,1))) )
c(F = 1, `tail area` = pf(1, 1, 1))
> eval(e3)
        F tail area 
      1.0       0.5 
> names(e3)
[1] ""          "F"         "tail area"
> 
> names(e3)[2] <- "Variance ratio"
> e3
c(`Variance ratio` = 1, `tail area` = pf(1, 1, 1))
> eval(e3)
Variance ratio      tail area 
           1.0            0.5 
> 
> 
> ##- From: Peter Dalgaard BSA <p.dalgaard@biostat.ku.dk>
> ##- Date: 2 Sep 1999
> 
> ## The first failed in 0.65.0 :
> attach(list(x=1))
> evalq(dim(x) <- 1,as.environment(2))
> dput(get("x", envir=as.environment(2)), control="all")
structure(1, .Dim = 1L)
> 
> e <- local({x <- 1;environment()})
> evalq(dim(x) <- 1,e)
> dput(get("x",envir=e), control="all")
structure(1, .Dim = 1L)
> 
> ### Substitute, Eval, Parse, etc
> 
> ## PR#3 : "..." matching
> ## Revised March 7 2001 -pd
> A <- function(x, y, ...) {
+     B <- function(a, b, ...) { match.call() }
+     B(x+y, ...)
+ }
> (aa <- A(1,2,3))
B(a = x + y, b = 3)
> all.equal(as.list(aa),
+           list(as.name("B"), a = expression(x+y)[[1]], b = 3))
[1] TRUE
> (a2 <- A(1,2, named = 3)) #A(1,2, named = 3)
B(a = x + y, named = 3)
> all.equal(as.list(a2),
+           list(as.name("B"), a = expression(x+y)[[1]], named = 3))
[1] TRUE
> 
> CC <- function(...) match.call()
> DD <- function(...) CC(...)
> a3 <- DD(1,2,3)
> all.equal(as.list(a3),
+           list(as.name("CC"), 1, 2, 3))
[1] TRUE
> 
> ## More dots issues: March 19 2001 -pd
> ## Didn't work up to and including 1.2.2
> 
> f <- function(...) {
+ 	val <- match.call(expand.dots=FALSE)$...
+         x <- val[[1]]
+ 	eval.parent(substitute(missing(x)))
+ }
> g <- function(...) h(f(...))
> h <- function(...) list(...)
> k <- function(...) g(...)
> X <- k(a=)
> all.equal(X, list(TRUE))
[1] TRUE
> 
> ## Bug PR#24
> f <- function(x,...) substitute(list(x,...))
> deparse(f(a, b)) == "list(a, b)" &&
+ deparse(f(b, a)) == "list(b, a)" &&
+ deparse(f(x, y)) == "list(x, y)" &&
+ deparse(f(y, x)) == "list(y, x)"
[1] TRUE
> 
> tt <- function(x) { is.vector(x); deparse(substitute(x)) }
> a <- list(b=3); tt(a$b) == "a$b" # tends to break when ...
[1] TRUE
> 
> 
> ## Parser:
> 1 <
+     2
[1] TRUE
> 2 <=
+     3
[1] TRUE
> 4 >=
+     3
[1] TRUE
> 3 >
+     2
[1] TRUE
> 2 ==
+     2
[1] TRUE
> ## bug till ...
> 1 !=
+     3
[1] TRUE
> 
> all(NULL == NULL)
[1] TRUE
> 
> ## PR #656 (related)
> u <- runif(1);	length(find(".Random.seed")) == 1
[1] TRUE
> 
> MyVaR <<- "val";length(find("MyVaR")) == 1
[1] TRUE
> rm(MyVaR);	length(find("MyVaR")) == 0
[1] TRUE
> 
> 
> ## Martin Maechler: rare bad bug in sys.function() {or match.arg()} (PR#1409)
> callme <- function(a = 1, mm = c("Abc", "Bde")) {
+     mm <- match.arg(mm); cat("mm = "); str(mm) ; invisible()
+ }
> ## The first two were as desired:
> callme()
mm =  chr "Abc"
> callme(mm="B")
mm =  chr "Bde"
> mycaller <- function(x = 1, callme = pi) { callme(x) }
> mycaller()## wrongly gave `mm = NULL'  now = "Abc"
mm =  chr "Abc"
> 
> 
> ## Test pqR fix to DispatchOrEval.
> 
> a <- 0
> class(a) <- "fred"
> seq.fred <- function (x, y) deparse(substitute(y))
> seq(a,1+2)      # should both be "1 + 2"
[1] "1 + 2"
> seq.int(a,1+2)  # ...  but this one used to be "3"
[1] "1 + 2"
> 
> 
> ## Tests of 'for', including 'along', mostly like in help("for"), but 
> ## here using stopifnot.
> 
> s <- character()
> for (i in s) 0
> print(i)
NULL
> stopifnot(identical(i,NULL))
> 
> s <- character()
> for (i along letters) s[i] <- paste0(".",letters[i])
> print(s)
 [1] ".a" ".b" ".c" ".d" ".e" ".f" ".g" ".h" ".i" ".j" ".k" ".l" ".m" ".n" ".o"
[16] ".p" ".q" ".r" ".s" ".t" ".u" ".v" ".w" ".x" ".y" ".z"
> stopifnot(identical(s,paste0(".",letters)))
> print(i)
[1] 26
> stopifnot(identical(i,length(letters)))
> 
> M <- matrix(0,nrow=4,ncol=5)
> for (i, j along M) M[i,j] <- i*j
> print(M)
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    2    3    4    5
[2,]    2    4    6    8   10
[3,]    3    6    9   12   15
[4,]    4    8   12   16   20
> stopifnot(identical(M,outer(1:4,1:5)))
> print(c(i,j))
[1] 4 5
> stopifnot(identical(c(i,j),c(4L,5L)))
> 
> v <- c(7,0,-1,3,-2,0,1,-3,9)
> for (i along v) {
+     if (v[i] < 0) {
+         v[i] <- -v[i]
+         next
+     }
+     if (v[i] == 1)
+         break
+     v[i] <- v[i] + if (v[i] < 5) 2 else 1
+ }
> print(v) 
[1]  8  2  1  5  2  2  1 -3  9
> stopifnot(identical(v,c(8,2,1,5,2,2,1,-3,9)))
> print(i)
[1] 7
> stopifnot(identical(i,7L))
> 
> 
> ## Special 'for' tests about when loop variables are modified, or removed,
> ## or have contents referenced from elsewhere.
> 
> for (i in 1:5) {
+     print(i)
+     i <- 10
+ }
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
> 
> for (i in 1:5) {
+     print(i)
+     if (i==3) j <- i
+ }
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
> 
> print(i)
[1] 5
> print(j)
[1] 3
> 
> for (i in 1:5) {
+     print(i)
+     rm(i)
+     i <- 10
+ }
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
> 
> print(i)
[1] 10
> 
> M <- matrix(0,3,2)
> 
> for (i,j along M) {
+     print(c(i,j))
+     i <- 1000
+     j <- 2000
+ }
[1] 1 1
[1] 2 1
[1] 3 1
[1] 1 2
[1] 2 2
[1] 3 2
> 
> print(c(i,j))
[1] 1000 2000
> 
> for (i, j along M) {
+     print(c(i,j))
+     rm(i,j)
+ }
[1] 1 1
[1] 2 1
[1] 3 1
[1] 1 2
[1] 2 2
[1] 3 2
> 
> for (i, j along M) {
+     print(c(i,j))
+     if (i==2 && j==2) { a <- i; b <- j }
+ }
[1] 1 1
[1] 2 1
[1] 3 1
[1] 1 2
[1] 2 2
[1] 3 2
> 
> print(c(i,j))
[1] 3 2
> print(c(a,b))
[1] 2 2
> 
> 
> ## Tests of 'missing'.
> 
> f <- function (x,y) c(missing(x),missing(y))
> g <- function (a,b) f(a,b)
> 
> f(1,2)
[1] FALSE FALSE
> f(,2)
[1]  TRUE FALSE
> f(1,)
[1] FALSE  TRUE
> f(_,2)
[1]  TRUE FALSE
> f(1,_)
[1] FALSE  TRUE
> f()
[1] TRUE TRUE
> f(_,_)
[1] TRUE TRUE
> 
> g(1,2)
[1] FALSE FALSE
> g(,2)
[1]  TRUE FALSE
> g(1,)
[1] FALSE  TRUE
> g(_,2)
[1]  TRUE FALSE
> g(1,_)
[1] FALSE  TRUE
> g()
[1] TRUE TRUE
> g(_,_)
[1] TRUE TRUE
> 
