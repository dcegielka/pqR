
pqR version 2.15.0 (2014-00-00), based on R 2.15.0 (2012-03-30)

R is Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

Modifications to R in pqR are Copyright (C) 2013-2014 Radford M. Neal

Platform: x86_64-unknown-linux-gnu (64-bit)
No helper threads, task merging enabled.

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Test performance of complex assignments, by seeing what storage
> # allocation is done.
> 
> print(1)  # get some stuff allocated before Rprofmemt activatived.
[1] 1
> 
> vsize <- 100  # must be multiple of 4
> Rprofmemt(nelem=vsize)
> 
> # One-level assignments.
> 
> a <- numeric(vsize)
RPROFMEM: 840 (double 100):"numeric" 
> a[10] <- 3        # shouldn't duplicate
> a[[11]] <- 4      # shouldn't duplicate
> print(a)
  [1] 0 0 0 0 0 0 0 0 0 3 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [38] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [75] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
> 
> a <- c(list(a=4,b=FALSE),rep(list(7),vsize-2))
RPROFMEM: 840 (list 100):
RPROFMEM: 840 (character 100):
> a$b <- TRUE       # shouldn't duplicate
> a[10] <- 3        # shouldn't duplicate
> a[[11]] <- 4      # shouldn't duplicate
> print(unlist(a))
RPROFMEM: 840 (double 100):"unlist" "print" 
RPROFMEM: 840 (character 100):"unlist" "print" 
a b                                                                             
4 1 7 7 7 7 7 7 7 3 4 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 
                                                                                
7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 
                                        
7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 
> 
> names(a) <- NULL  # shouldn't duplicate
RPROFMEM: 840 (list 100):
RPROFMEM: 840 (character 100):
> print(unlist(a))
RPROFMEM: 840 (double 100):"unlist" "print" 
  [1] 4 1 7 7 7 7 7 7 7 3 4 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7
 [38] 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7
 [75] 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7
> 
> a <- numeric(vsize)
RPROFMEM: 840 (double 100):"numeric" 
> b <- a
> a[[3]] <- -1      # will have to duplicate
RPROFMEM: 840 (double 100):
> b[[4]] <- -2      # shouldn't duplicate
> print(a)
  [1]  0  0 -1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 [26]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 [51]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 [76]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
> print(b)
  [1]  0  0  0 -2  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 [26]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 [51]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 [76]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
> 
> a <- numeric(vsize)
RPROFMEM: 840 (double 100):"numeric" 
> n <- paste0("xx",1:vsize)
RPROFMEM: 440 (integer 100):"paste0" 
RPROFMEM: 840 (character 100):"paste0" 
RPROFMEM: 840 (character 100):"paste0" 
> names(a) <- n     # shouldn't duplicate numeric part, might duplicate names
RPROFMEM: 840 (character 100):
> 
> # Two-level assignments.
> 
> a <- rep(list(a=1,b=1:vsize,c="xx",d="yy"),vsize/4)
RPROFMEM: 440 (integer 100):
RPROFMEM: 840 (list 100):
RPROFMEM: 840 (character 100):
> a$b[3] <- 99L     # will need to duplicate, because of repeated elements
RPROFMEM: 440 (integer 100):
> print(a$b+1000L)  # don't pass a$b itself, since affects NAMEDCNT
RPROFMEM: 440 (integer 100):"print" 
  [1] 1001 1002 1099 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015
 [16] 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030
 [31] 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045
 [46] 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060
 [61] 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075
 [76] 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090
 [91] 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100
> a$b[3] <- 99L     # shouldn't duplicate now
> print(a$b+1000L)
RPROFMEM: 440 (integer 100):"print" 
  [1] 1001 1002 1099 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015
 [16] 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030
 [31] 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045
 [46] 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060
 [61] 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075
 [76] 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090
 [91] 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100
> print(a[[6]])     # should still be 1:vsize
  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18
 [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36
 [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54
 [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72
 [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90
 [91]  91  92  93  94  95  96  97  98  99 100
> a$b[3] <- 99.1    # will have to coerce to real, shouldn't duplicate int vec
RPROFMEM: 840 (double 100):
> print(a$b+1000)
RPROFMEM: 840 (double 100):"print" 
  [1] 1001.0 1002.0 1099.1 1004.0 1005.0 1006.0 1007.0 1008.0 1009.0 1010.0
 [11] 1011.0 1012.0 1013.0 1014.0 1015.0 1016.0 1017.0 1018.0 1019.0 1020.0
 [21] 1021.0 1022.0 1023.0 1024.0 1025.0 1026.0 1027.0 1028.0 1029.0 1030.0
 [31] 1031.0 1032.0 1033.0 1034.0 1035.0 1036.0 1037.0 1038.0 1039.0 1040.0
 [41] 1041.0 1042.0 1043.0 1044.0 1045.0 1046.0 1047.0 1048.0 1049.0 1050.0
 [51] 1051.0 1052.0 1053.0 1054.0 1055.0 1056.0 1057.0 1058.0 1059.0 1060.0
 [61] 1061.0 1062.0 1063.0 1064.0 1065.0 1066.0 1067.0 1068.0 1069.0 1070.0
 [71] 1071.0 1072.0 1073.0 1074.0 1075.0 1076.0 1077.0 1078.0 1079.0 1080.0
 [81] 1081.0 1082.0 1083.0 1084.0 1085.0 1086.0 1087.0 1088.0 1089.0 1090.0
 [91] 1091.0 1092.0 1093.0 1094.0 1095.0 1096.0 1097.0 1098.0 1099.0 1100.0
> a$b[3] <- 99.1    # shouldn't duplicate now
> print(a$b+1000)
RPROFMEM: 840 (double 100):"print" 
  [1] 1001.0 1002.0 1099.1 1004.0 1005.0 1006.0 1007.0 1008.0 1009.0 1010.0
 [11] 1011.0 1012.0 1013.0 1014.0 1015.0 1016.0 1017.0 1018.0 1019.0 1020.0
 [21] 1021.0 1022.0 1023.0 1024.0 1025.0 1026.0 1027.0 1028.0 1029.0 1030.0
 [31] 1031.0 1032.0 1033.0 1034.0 1035.0 1036.0 1037.0 1038.0 1039.0 1040.0
 [41] 1041.0 1042.0 1043.0 1044.0 1045.0 1046.0 1047.0 1048.0 1049.0 1050.0
 [51] 1051.0 1052.0 1053.0 1054.0 1055.0 1056.0 1057.0 1058.0 1059.0 1060.0
 [61] 1061.0 1062.0 1063.0 1064.0 1065.0 1066.0 1067.0 1068.0 1069.0 1070.0
 [71] 1071.0 1072.0 1073.0 1074.0 1075.0 1076.0 1077.0 1078.0 1079.0 1080.0
 [81] 1081.0 1082.0 1083.0 1084.0 1085.0 1086.0 1087.0 1088.0 1089.0 1090.0
 [91] 1091.0 1092.0 1093.0 1094.0 1095.0 1096.0 1097.0 1098.0 1099.0 1100.0
> a[[10]][2] <- 40L # will need to duplicate, because of repeated elements
RPROFMEM: 440 (integer 100):
> print(a[[10]]+1000L)
RPROFMEM: 440 (integer 100):"print" 
  [1] 1001 1040 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015
 [16] 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030
 [31] 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045
 [46] 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060
 [61] 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075
 [76] 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090
 [91] 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100
> a[[10]][2] <- 40L # shouldn't duplicate now
> print(a[[10]]+1000L)
RPROFMEM: 440 (integer 100):"print" 
  [1] 1001 1040 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015
 [16] 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030
 [31] 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045
 [46] 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060
 [61] 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075
 [76] 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090
 [91] 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100
> 
> a <- c(list(x=c(0,y=1,rep(0,vsize-2))),rep(list("a"),vsize-1))
RPROFMEM: 840 (double 100):
RPROFMEM: 840 (character 100):
RPROFMEM: 840 (list 100):
RPROFMEM: 840 (double 100):
RPROFMEM: 840 (character 100):
RPROFMEM: 840 (character 100):
> a$x[2] <- 12      # shouldn't duplicate
> print(a$x+1000)
RPROFMEM: 840 (double 100):"print" 
RPROFMEM: 840 (character 100):"print" 
        y                                                                       
1000 1012 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 
                                                                                
1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 
                                                                                
1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 
                                                                                
1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 
                                                                                
1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 
                                                                                
1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 
                    
1000 1000 1000 1000 
> a$x[[2]] <- 13    # shouldn't duplicate
> print(a$x+1000)
RPROFMEM: 840 (double 100):"print" 
RPROFMEM: 840 (character 100):"print" 
        y                                                                       
1000 1013 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 
                                                                                
1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 
                                                                                
1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 
                                                                                
1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 
                                                                                
1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 
                                                                                
1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 
                    
1000 1000 1000 1000 
> a$x["y"] <- 14    # shouldn't duplicate
> print(a$x+1000)
RPROFMEM: 840 (double 100):"print" 
RPROFMEM: 840 (character 100):"print" 
        y                                                                       
1000 1014 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 
                                                                                
1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 
                                                                                
1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 
                                                                                
1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 
                                                                                
1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 
                                                                                
1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 
                    
1000 1000 1000 1000 
> a$x[["y"]] <- 15  # shouldn't duplicate
> print(a$x+1000)
RPROFMEM: 840 (double 100):"print" 
RPROFMEM: 840 (character 100):"print" 
        y                                                                       
1000 1015 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 
                                                                                
1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 
                                                                                
1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 
                                                                                
1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 
                                                                                
1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 
                                                                                
1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 
                    
1000 1000 1000 1000 
> 
> a <- numeric(vsize)
RPROFMEM: 840 (double 100):"numeric" 
> n <- paste0("xx",1:vsize)
RPROFMEM: 440 (integer 100):"paste0" 
RPROFMEM: 840 (character 100):"paste0" 
RPROFMEM: 840 (character 100):"paste0" 
> names(a) <- n     # shouldn't duplicate numeric part
RPROFMEM: 840 (character 100):
> names(a)[2] <- "q"# shouldn't duplicate anything
RPROFMEM: 840 (character 100):
RPROFMEM: 840 (character 100):
> print(a)
  xx1     q   xx3   xx4   xx5   xx6   xx7   xx8   xx9  xx10  xx11  xx12  xx13 
    0     0     0     0     0     0     0     0     0     0     0     0     0 
 xx14  xx15  xx16  xx17  xx18  xx19  xx20  xx21  xx22  xx23  xx24  xx25  xx26 
    0     0     0     0     0     0     0     0     0     0     0     0     0 
 xx27  xx28  xx29  xx30  xx31  xx32  xx33  xx34  xx35  xx36  xx37  xx38  xx39 
    0     0     0     0     0     0     0     0     0     0     0     0     0 
 xx40  xx41  xx42  xx43  xx44  xx45  xx46  xx47  xx48  xx49  xx50  xx51  xx52 
    0     0     0     0     0     0     0     0     0     0     0     0     0 
 xx53  xx54  xx55  xx56  xx57  xx58  xx59  xx60  xx61  xx62  xx63  xx64  xx65 
    0     0     0     0     0     0     0     0     0     0     0     0     0 
 xx66  xx67  xx68  xx69  xx70  xx71  xx72  xx73  xx74  xx75  xx76  xx77  xx78 
    0     0     0     0     0     0     0     0     0     0     0     0     0 
 xx79  xx80  xx81  xx82  xx83  xx84  xx85  xx86  xx87  xx88  xx89  xx90  xx91 
    0     0     0     0     0     0     0     0     0     0     0     0     0 
 xx92  xx93  xx94  xx95  xx96  xx97  xx98  xx99 xx100 
    0     0     0     0     0     0     0     0     0 
> 
