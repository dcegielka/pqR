
pqR version 2.15.1 (2018-00-00), based on R 2.15.0 (2012-03-30)

R 2.15.0 is Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

Modifications to R in pqR are Copyright (C) 2013-2018 Radford M. Neal

Some modules are from R-2.15.1 or later versions distributed by the R Core Team

Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.


No helper threads, task merging enabled, uncompressed pointers.

> ###---- ALL tests here should return  TRUE !
> ###
> ###---- "Real" Arithmetic; Numerics etc  -->  ./arith-true.R
> 
> ### mode checking, etc.
> is.recursive(expression(1+3, 2/sqrt(pi)))# fix PR#9
[1] TRUE
> 
> ## sum():
> all(1:12 == cumsum(rep(1,12)))
[1] TRUE
> x <- rnorm(127); sx <- sum(x);	abs((sum(rev(x)) -sx)) < 1e-12 * abs(sx)
[1] TRUE
> 
> ## seq():
> typeof(1:4) == "integer" #-- fails for 0.2, 0.3,.., 0.9
[1] TRUE
> 
> ## Check parsing with L suffix for integer literals.
> typeof(1L) == "integer"
[1] TRUE
> typeof(1000L) == "integer"
[1] TRUE
> typeof(1e3L) == "integer"
[1] TRUE
> typeof(1e-3L) == "double" # gives warning
[1] TRUE
Warning message:
non-integer value 1e-3 qualified with L; using numeric value 
> 1.L # gives warning
[1] 1
Warning message:
integer literal 1.L contains unnecessary decimal point 
> try(parse(text = "12iL")) # gives syntax error
Error in parse(text = "12iL") : <text>:1:4: unexpected symbol
1: 12iL
      ^
> 
> 
> all((0:6) == pi + ((-pi):pi))
[1] TRUE
> all((0:7) == (pi+seq(-pi,pi, length=8))*7/(2*pi))
[1] TRUE
> 
> 1 == as.integer(is.na(c(pi,NA)[2]))
[1] TRUE
> 1 == as.integer(is.nan(0/0))
[1] TRUE
> 
> ## rev():
> cc <- c(1:10,10:1) ;		all(cc == rev(cc))
[1] TRUE
> 
> ## dim[names]():
> all(names(c(a=pi, b=1, d=1:4)) == c("a","b", paste("d", 1:4, sep="")))
[1] TRUE
> ##P names(c(a=pi, b=1, d=1:4))
> ncb <- dimnames(cbind(a=1, yy=1:3))[[2]]
> (!is.null(ncb)) && all(ncb == c("a","yy"))
[1] TRUE
> 
> all(cbind(a=1:2, b=1:3, c=1:6) == t(rbind(a=1:2, b=1:3, c=1:6)))
[1] TRUE
> ##P rbind(a=1:2, b=1:3, c=1:6)
> identical(dim(cbind(cbind(I=1,x=1:4), c(a=pi))), 4:3)# fails in S+
[1] TRUE
> 
> a <- b <- 1:3
> identical(dimnames(cbind(a, b))[[2]], c("a","b"))
[1] TRUE
> 
> ## rbind PR#338
> identical(dim(m <- rbind(1:2, diag(2))), 3:2)
[1] TRUE
> all(m == c(1,1,0, 2,0,1))
[1] TRUE
> 
> ## factor():
> is.factor(factor(integer()))
[1] TRUE
> all(levels(ordered(rev(gl(3,4)))) == 1:3)# coercion to char
[1] TRUE
> all(levels(factor(factor(9:1)[3:5])) == 5:7)
[1] TRUE
> ## crossing bug PR#40
> is.factor(ff <- gl(2,3) : gl(3,2)) && length(ff) == 6
[1] TRUE
> all(levels(ff) == t(outer(1:2, 1:3, paste, sep=":")))
[1] TRUE
> ## from PR#5
> ll <- c("A","B"); ff <- factor(ll); f0 <- ff[, drop=TRUE]
> all(f0 == ff) && all(levels(ff) == ll) && is.factor(ff) && is.factor(f0)
[1] TRUE
> 
> ### data.frame s :
> 
> ## from lists [bug PR#100]
> x <- NULL
> x$x1 <- 1:10
> x$x2 <- 0:9
> identical(dim(dx <- as.data.frame(x)), c(10L,2L))
[1] TRUE
> 
> ## Logicals: (S is wrong)
> l1 <- c(TRUE,FALSE,TRUE)
> (! as.logical(as.data.frame(FALSE)[,1]))
[1] TRUE
> all(l1 == as.logical(as.data.frame(l1)[,1]))
[1] TRUE
> 
> ## empty data.frames :
> x <- data.frame(a=1:3)
> x30 <- {
+     if(is.R()) x[, -1]# not even possible in S+
+     else structure(list(), row.names = paste(1:3), class = "data.frame")
+ }
> identical(dim(x30), c(3L,0L))
[1] TRUE
> x01 <- x[-(1:3), , drop = FALSE]
> x00 <- x01[,-1]
> identical(dim(x01), 0:1)
[1] TRUE
> identical(dim(x00), c(0L,0L))
[1] TRUE
> identical(dim(x), dim(rbind(x, x01)))
[1] TRUE
> ## bugs up to 1.2.3 :
> identical(dim(x30), dim(m30 <- as.matrix(x30)))
[1] TRUE
> identical(dim(x01), dim(m01 <- as.matrix(x01)))
[1] TRUE
> identical(dim(x30), dim(as.data.frame(m30)))
[1] TRUE
> identical(dim(x01), dim(as.data.frame(m01)))
[1] TRUE
> identical(dim(x01), dim(   data.frame(m01)))
[1] TRUE
> identical(dim(x30), dim(   data.frame(m30)))
[1] TRUE
> identical(dim(x),   dim(cbind(x, x30)))
[1] TRUE
> ## up to 1.4.0 :
> identical(dim(x30), dim( data.matrix(x30)))
[1] TRUE
> identical(dim(x00), dim( data.matrix(x00)))
[1] TRUE
> 
> m0 <- matrix(pi, 0,3)
> a302 <- array("", dim=c(3,0,2))
> identical(apply(m0, 1, dim), NULL)
[1] TRUE
> identical(apply(m0, 2, dim), NULL)
[1] TRUE
> identical(apply(m0, 1,length),  integer(0))
[1] TRUE
> identical(apply(m0, 2,length),  integer(3))
[1] TRUE
> identical(apply(a302, 1, mode), rep("character",3))
[1] TRUE
> ## NO (maybe later?):
> ## identical(apply(a302, 2, mode), rep("character",0))
> is.character(aa <- apply(a302, 2, mode)) && length(aa) == 0
[1] TRUE
> identical(apply(a302, 3, mode), rep("character",2))
[1] TRUE
> identical(apply(a302, 3, length),integer(2))
[1] TRUE
> identical(apply(a302, 3, dim), matrix(as.integer(c(3,0)), 2 ,2))
[1] TRUE
> identical(apply(a302, 1, dim), matrix(as.integer(c(0,2)), 2 ,3))
[1] TRUE
> identical(apply(array(dim=3), 1,length), rep(1:1, 3))
[1] TRUE
> identical(apply(array(dim=0), 1,length), rep(1:1, 0))# = integer(0)
[1] TRUE
> 
> 
> ### Subsetting
> 
> ## bug PR#425
> x <- matrix(1:4, 2, 2, dimnames=list(c("abc","ab"), c("cde","cd")))
> y <- as.data.frame(x)
> all(x["ab",] == c(2,4))
[1] TRUE
> all(y["ab",] == c(2,4))
[1] TRUE
> 
> ## from bug PR#447
> x <- 1:2 ; x[c("2","2")] <- 4
> all.equal(x, c(1:2, "2" = 4))
[1] TRUE
> 
> ## stretching
> l2 <- list(a=1, b=2)
> l2["cc"] <- pi
> l2[["d"]] <- 4
> l2 $ e <- 55
> all.equal(l2, list(a = 1, b = 2, cc = pi, d = 4, e = 55), tolerance = 0)
[1] TRUE
> all.equal(l2["d"], list(d = 4))
[1] TRUE
> l2$d == 4 && l2$d == l2[["d"]]
[1] TRUE
> 
> ## bug in R <= 1.1
> f1 <- y1 ~ x1
> f2 <- y2 ~ x2
> f2[2] <- f1[2]
> deparse(f2) == "y1 ~ x2"
[1] TRUE
> 
> m <- cbind(a=1:2,b=c(R=10,S=11))
> all(sapply(dimnames(m), length) == c(2,2))
[1] TRUE
> ## [[ for matrix:
> m[[1,2]] == m[[3]] && m[[3]] == m[3] && m[3] == m[1,2]
[1] TRUE
> 
> ## bug in R <= 1.1.1 : unclass(*) didn't drop the class!
> ## to be robust to S4 methods DON'T test for null class
> ## The test for attr(,"class") is valid, if essentially useless
> d1 <- rbind(data.frame(a=1, b = I(TRUE)), new = c(7, "N"))
> is.null(attr(unclass(d1$b), "class"))
[1] TRUE
> 
> ## bugs in R 1.2.0
> format(as.POSIXct(relR120 <- "2000-12-15 11:24:40")) == relR120
[1] TRUE
> format(as.POSIXct(substr(relR120,1,10))) == substr(relR120,1,10)
[1] TRUE
> 
> ## rank() with NAs (and ties)
> x <- c(3:1,6,4,3,NA,5,0,NA)
> rx <-  rank(x)
> all(rx == c(4.5, 3:2, 8, 6, 4.5, 9, 7, 1, 10))
[1] TRUE
> rxK <- rank(x, na.last = "keep")
> all(rx [rx <= 8]    == na.omit(rxK))
[1] TRUE
> all(rank(x, na.last = NA) == na.omit(rxK))
[1] TRUE
> 
> ## as.list.function() instead of *.default():
> identical(as.list(as.list),
+ 	  alist(x = , ... = , UseMethod("as.list")))
[1] TRUE
> 
> ## Correctness of optimizing away unclass.
> a <- c(3,1,2)
> b <- c(6,1,9)
> x <- structure (c(10,40,20), class="fred")
> y <- structure (c(30,20,40), class="fred")
> exp.fred <- function (x) structure (10*x, class="fred")
> `+.fred` <- function (e1,e2) 
+               structure ((unclass(e1)+unclass(e2)) * 1000, class="fred")
> `<.fred` <- function (e1,e2) unclass(e1)*2 < unclass(e2)
> identical(exp(x),structure(c(100,400,200),class="fred"))
[1] TRUE
> identical(x+y,structure(c(40000,60000,60000),class="fred"))
[1] TRUE
> identical(x+b,structure(c(16000,41000,29000),class="fred"))
[1] TRUE
> identical(a+y,structure(c(33000,21000,42000),class="fred"))
[1] TRUE
> identical(x<y,c(TRUE,FALSE,FALSE))
[1] TRUE
> identical(b<x,c(FALSE,TRUE,TRUE))
[1] TRUE
> 
> # The 'lengths' function.
> 
> identical(lengths(2:4),c(1L,1L,1L))
[1] TRUE
> identical(lengths(list(9,x=2:4,list("a","b"))),c(1L,x=3L,2L))
[1] TRUE
> identical(lengths(list(9,x=2:4,list("a","b")),FALSE),c(1L,3L,2L))
[1] TRUE
> 
> A <- list()
> class(A)<-"fred"
> `length.fred` <- function (x) 7
> `[[.fred` <- function(x,i) 1:(i+10)
> identical(lengths(A),11:17)
[1] TRUE
> 
> # Some tests of 'order' and 'sort':
> 
> set.seed(123456)
> n <- 10000
> a <- sample(c("aa","bb","cc"),n,replace=TRUE)
> b <- sample(200000,n,replace=TRUE)
> c <- b + 0.1
> 
> for (w in c("a","b","c")) {
+     d <- get(w)
+     oo <- order(d)
+     for (m in c("radix","shell","merge")) {
+         cat("sorting",w,"by",m,"method\n")
+         s <- sort  (d, method = if (m=="merge") "radix" else m)
+         o <- order (d, method = m)
+         print(!is.unsorted(s))
+         print(identical(s,d[o]))
+         print(identical(table(d,dnn=NULL),table(s,dnn=NULL)))
+         print(identical(o,oo))
+     }
+ }
sorting a by radix method
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
sorting a by shell method
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
sorting a by merge method
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
sorting b by radix method
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
sorting b by shell method
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
sorting b by merge method
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
sorting c by radix method
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
sorting c by shell method
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
sorting c by merge method
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
> 
> o <- order(a,b,method="shell")
> !is.unsorted(a[o])
[1] TRUE
> identical(table(a,dnn=NULL),table(a[o],dnn=NULL))
[1] TRUE
> identical(table(b,dnn=NULL),table(b[o],dnn=NULL))
[1] TRUE
> for (w in c("aa","bb","cc")) {
+     print(!is.unsorted(b[o[a[o]==w]]))
+ }
[1] TRUE
[1] TRUE
[1] TRUE
> 
> o2 <- order(a,b,method="merge")
> identical(o,o2)
[1] TRUE
> 
> # Matrix formation with and without byrow=TRUE.
> 
> identical (matrix(7,3,8), matrix(rep(7,24),3,8))
[1] TRUE
> identical (matrix(7,3,8,byrow=TRUE), matrix(rep(7,24),3,8,byrow=TRUE))
[1] TRUE
> identical (matrix(1:24,3,8), t(matrix(1:24,8,3,byrow=TRUE)))
[1] TRUE
> identical (matrix(4:5,4,6), t(matrix(4:5,6,4,byrow=TRUE)))
[1] TRUE
> identical (matrix(1:3,4,6), t(matrix(1:3,6,4,byrow=TRUE)))
[1] TRUE
> identical (matrix(1:3,4,6,byrow=TRUE),matrix(rep(1:3,length=24),4,6,byrow=TRUE))
[1] TRUE
> identical (matrix(1:3,6,4,byrow=TRUE),matrix(rep(1:3,length=24),6,4,byrow=TRUE))
[1] TRUE
> 
<<<<<<< Updated upstream
=======
> # Logical arithmetic.
> 
> identical (-TRUE, -1L)
[1] TRUE
> identical (+TRUE, 1L)
[1] TRUE
> identical (-c(TRUE,FALSE,TRUE), c(-1L,0L,-1L))
[1] TRUE
> identical (+c(TRUE,FALSE,TRUE), c(1L,0L,1L))
[1] TRUE
> 
> identical (0L-TRUE, -1L)
[1] TRUE
> identical (0L+TRUE, 1L)
[1] TRUE
> identical (0L-c(TRUE,FALSE,TRUE), c(-1L,0L,-1L))
[1] TRUE
> identical (0L+c(TRUE,FALSE,TRUE), c(1L,0L,1L))
[1] TRUE
> 
> identical (0-TRUE, -1)
[1] TRUE
> identical (0+TRUE, 1)
[1] TRUE
> identical (0-c(TRUE,FALSE,TRUE), c(-1,0,-1))
[1] TRUE
> identical (0+c(TRUE,FALSE,TRUE), c(1,0,1))
[1] TRUE
> 
> ## startsWith() / endsWith()  assertions
> t1 <- c("Foobar", "bla bla", "something", "another", "blu", "brown",
+         "blau blüht der Enzian")# non-ASCII
> t2 <- c("some text", "any text")
> t3 <- c("Martin", "Zürich", "Mächler")
> 
> all(endsWith(t1, "")); all(startsWith(t1, ""))
[1] TRUE
[1] TRUE
> all(endsWith(t2, "")); all(startsWith(t2, ""))
[1] TRUE
[1] TRUE
> all(endsWith(t3, "")); all(startsWith(t3, ""))
[1] TRUE
[1] TRUE
> all(endsWith(t2, "text"))
[1] TRUE
> all(endsWith(t2, " text"))
[1] TRUE
> identical(startsWith(t1, "b" ), c(FALSE, TRUE, FALSE, FALSE, TRUE,  TRUE, TRUE))
[1] TRUE
> identical(startsWith(t1, "bl"), c(FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, TRUE))
[1] TRUE
> identical(startsWith(t1, "bla"),c(FALSE, TRUE, FALSE, FALSE,FALSE, FALSE, TRUE))
[1] TRUE
> identical(  endsWith(t1, "n"),  c(FALSE,FALSE, FALSE, FALSE,FALSE,  TRUE, TRUE))
[1] TRUE
> identical(  endsWith(t1, "an"), c(FALSE,FALSE, FALSE, FALSE,FALSE, FALSE, TRUE))
[1] TRUE
> ##
> identical(startsWith(t3, "M" ), c( TRUE, FALSE, TRUE))
[1] TRUE
> identical(startsWith(t3, "Ma"), c( TRUE, FALSE, FALSE))
[1] TRUE
> identical(startsWith(t3, "Mä"), c(FALSE, FALSE, TRUE))
[1] TRUE
> 
>>>>>>> Stashed changes
